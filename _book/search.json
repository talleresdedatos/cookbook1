[{"path":"index.html","id":"presentación","chapter":"Presentación","heading":"Presentación","text":"En elaboración…","code":""},{"path":"index.html","id":"autor","chapter":"Presentación","heading":"Autor","text":"En elaboración…Samuel Enrique Calderon Serrano:Politólogo de la Universidad Antonio Ruiz de Montoya.Politólogo de la Universidad Antonio Ruiz de Montoya.Actualmente trabaja en la Superintendencia Nacional de Educación Universitaria - SUNEDU como miembro del Equipo Técnico Normativo de la Dirección de Licenciamiento.Actualmente trabaja en la Superintendencia Nacional de Educación Universitaria - SUNEDU como miembro del Equipo Técnico Normativo de la Dirección de Licenciamiento.Miembro de la organización DecideBien. Colabora ocasionalmente en iniciativas de código abierto.Miembro de la organización DecideBien. Colabora ocasionalmente en iniciativas de código abierto.Proviene de Lima, Perú.Proviene de Lima, Perú.Otros canales:\nWeb: www.samuelenrique.com\nTwitter: @samuel__case\nGithub: /calderonsamuel\nOtros canales:Web: www.samuelenrique.comTwitter: @samuel__caseGithub: /calderonsamuel","code":""},{"path":"index.html","id":"contenido-del-curso","chapter":"Presentación","heading":"Contenido del curso","text":"Público objetivo:\nEstudiantes o egresados de carreras de ciencias sociales, periodismo o educación con interés en aprender herramientas de análisis y visualización de datos.\nPúblico objetivo:Estudiantes o egresados de carreras de ciencias sociales, periodismo o educación con interés en aprender herramientas de análisis y visualización de datos.Aprendizajes esperados:\nElementos básicos del análisis de datos usando R través de RStudio\nImportación de datos\nLimpieza y ordenamiento de datos\nAnálisis exploratorio de datos ordenados (tidy data)\n\nElaboración de reportes de análisis de datos usando R Markdown\nAprendizajes esperados:Elementos básicos del análisis de datos usando R través de RStudio\nImportación de datos\nLimpieza y ordenamiento de datos\nAnálisis exploratorio de datos ordenados (tidy data)\nElementos básicos del análisis de datos usando R través de RStudioImportación de datosLimpieza y ordenamiento de datosAnálisis exploratorio de datos ordenados (tidy data)Elaboración de reportes de análisis de datos usando R MarkdownElaboración de reportes de análisis de datos usando R MarkdownEste curso enseñará:EstadísticaProgramaciónExcel, SPSS, Stata, etc","code":""},{"path":"index.html","id":"producto-final-esperado","chapter":"Presentación","heading":"Producto final esperado","text":"Cada participante elaborará un reporte que incluirá:Descripción de los conjuntos de datos utilizadosExplicación de metodología utilizadaProductos de análisis (ránkings, tablas de frecuencia, gráficos, etc)Interpretación de resultadosEl reporte usará conjuntos de datos abiertos y será publicado vía web en formato bookdown.Ejemplo: https://bit.ly/TallerDatos-02","code":""},{"path":"index.html","id":"software-requerido","chapter":"Presentación","heading":"Software requerido","text":"Para la presente edición del taller es necesario contar con el siguiente software instalado:R programming language (versión 4.0.0 o superior)RStudio IDE (versión 1.4.0 o superior)También se necesitan los siguientes paquetes de R:tidyverse (colección de paquetes)rmarkdown","code":""},{"path":"conociendo-R.html","id":"conociendo-R","chapter":"Capítulo 1 R y el IDE RStudio","heading":"Capítulo 1 R y el IDE RStudio","text":"","code":""},{"path":"conociendo-R.html","id":"qué-es-r","chapter":"Capítulo 1 R y el IDE RStudio","heading":"1.1 ¿Qué es R?","text":"","code":""},{"path":"conociendo-R.html","id":"r-en-la-terminal","chapter":"Capítulo 1 R y el IDE RStudio","heading":"1.1.1 R en la terminal","text":"R es un lenguaje de programación. Como todo lo que ocurre en una computadora, puede ejecutarse en una ventana de terminal. En Windows la conocemos como la ventana de comandos.Es posible acceder la consola de R desde una terminal.Windows: escribir la ubicación del ejecutable de RMac o Linux: escribir R","code":""},{"path":"conociendo-R.html","id":"el-rgui-como-editor","chapter":"Capítulo 1 R y el IDE RStudio","heading":"1.1.2 El Rgui como editor","text":"En los años 2000, se elaboró una interfaz más amigable y dedicada trabajar con R llamada “R Graphic User Interface” (Rgui).Esta interfaz nos conecta directamente la consola y nos brinda la opción de tener un editor de scripts, previsualizar nuestros gráficos, entre otras cosas.","code":""},{"path":"conociendo-R.html","id":"rstudio","chapter":"Capítulo 1 R y el IDE RStudio","heading":"1.1.3 RStudio","text":"En la década de los 2010 aparece el proyecto RStudio, gracias al trabajo de J.J. Allaire.Su desarrollo inició en diciembre de 2010 y su primera versión oficial se lanzó en noviembre de 2016. Es el editor con el que trabajaremos en estas sesiones.","code":""},{"path":"conociendo-R.html","id":"el-editor-de-código-rstudio","chapter":"Capítulo 1 R y el IDE RStudio","heading":"1.2 El editor de código RStudio","text":"Generalmente, será necesario acceder R través de una terminal ni del Rgui, porque lo haremos utilizando el entorno de programación RStudio, que nos brinda una consola de R automáticamente.Rstudio nos brinda varios paneles que cumplen distintas funciones. Es importante mencionar que el siguiente listado toma en cuenta la ubicación por defecto de los paneles, ya que se pueden modificar según el gusto de cada usuario.","code":""},{"path":"conociendo-R.html","id":"el-panel-de-edición","chapter":"Capítulo 1 R y el IDE RStudio","heading":"1.2.1 El panel de edición","text":"En este panel aparecerán todos los archivos editables. RStudio nos brinda la opción de utilizar múltiples tipos de archivo y de tener varios abiertos al mismo tiempo.Entre los formatos que se pueden abrir y editar en este panel encontramos:.R: Scripts de R.Rmd: Archivos R Markdown.py: Scripts de Python.html: Documentos en formato HTML.css: Hojas de estilo de cascada.txt: Documentos de texto sin enriquecer.csv: Archivos de valores separados por comasetcEn el panel de edición también podremos obtener un visor de datos cada vez que lo solicitemos.","code":""},{"path":"conociendo-R.html","id":"el-panel-de-consola","chapter":"Capítulo 1 R y el IDE RStudio","heading":"1.2.2 El panel de consola","text":"En el panel de consola encontramos directamente la consola de R lista para ser usada.Generalmente, este panel es usado directamente en ocasionas muy puntuales, ya que la mayor parte del tiempo se trabajará con código en el panel de edición.Cabe mencionar que este panel también brinda acceso una pestaña de Terminal y una pestaña de ejecución de trabajos en paralelo (Jobs).","code":""},{"path":"conociendo-R.html","id":"el-panel-de-environment","chapter":"Capítulo 1 R y el IDE RStudio","heading":"1.2.3 El panel de environment","text":"Desde este panel tenemos acceso todos los environment de nuestra sesión de R. Cuando creemos un objeto, nos aparecerá listado en este panel.Cuando trabajemos en otros tipos de proyectos, como la creación de paquetes, conexión remota bases de datos, creación de páginas web, uso de sistemas de control de versiones, etc, este panel tendrá otras pestañas para mostrar el estado de esos trabajos.","code":""},{"path":"conociendo-R.html","id":"el-panel-de-apoyo","chapter":"Capítulo 1 R y el IDE RStudio","heading":"1.2.4 El panel de apoyo","text":"Este panel nos permitirá previsualizar el resultado de nuestro trabajo. Cuenta con lo siguiente:Explorador de archivos (Files)Ventana de gráficos (Plots)Explorador de paquetes instalados (Packages)Ventana de ayuda (Help)Visualizador de contenido Web (View)","code":""},{"path":"conociendo-R.html","id":"el-directorio-de-trabajo","chapter":"Capítulo 1 R y el IDE RStudio","heading":"1.3 El directorio de trabajo","text":"El directorio de trabajo es donde R busca los archivos que le pides cargar, y donde pondrá los archivos que le pidas guardar. RStudio muestra el directorio de trabajo en la parte superior de la consola.En muchas ocasiones existe la tentación de trabajar con archivos que están fuera de nuestro directorio de trabajo. Es recomendable evitar este comportamiento porque suele ser la raíz de muchos problemas.Para ello, RStudio cuenta con los Proyectos, una manera sencilla de organizar nuestro trabajo. Mi mayor recomendación para usuarios de RStudio iniciantes y especialistas es trabajar siempre con proyectos dentro de RStudio.","code":""},{"path":"conociendo-R.html","id":"asignar-directorio-de-trabajo-por-defecto","chapter":"Capítulo 1 R y el IDE RStudio","heading":"1.3.1 Asignar directorio de trabajo por defecto","text":"El directorio de trabajo por defecto es la carpeta en la que R usará cada vez que estemos dentro de un proyecto. Por defecto, es la carpeta de “Documentos” del usuario de la computadora.RStudio cuenta con un explorador de archivos para revisar el contenido de nuestros directorios.Mi recomendación personal es utilizar como directorio general la carpeta llamada “R” dentro de “Documentos.”Acceder “Global options” dentro del Menú “Tools.”En las opciones generales, elegir la carpeta “R” como Default working directory.","code":""},{"path":"conociendo-R.html","id":"proyectos","chapter":"Capítulo 1 R y el IDE RStudio","heading":"1.4 Proyectos","text":"","code":""},{"path":"conociendo-R.html","id":"crear-proyectos","chapter":"Capítulo 1 R y el IDE RStudio","heading":"1.4.1 Crear proyectos","text":"Puedes crear un proyecto siguiendo la siguiente ruta:Ir al menú “File”Hacer click en “New Project”Elegir “New directory”Elegir “New project” (las demás opciones son plantillas para proyectos típicos con los que te podrás familiarizar más adelante)Indicar el nombre del proyectoElegir la carpeta en la que se guardará el proyecto. (Recomiendo que sea la carpeta “R”)Hacer click en “Create project”Si estás usando el servicio https://www.rstudio.cloud puedes crear nuevos proyectos en tu espacio de trabajo (workspace).Ir al menú file\nHacer click en “New Project”\nHacer click en “New Project”\nElegir “New directory”\nElegir “New directory”\nElegir “New project”\nElegir “New project”Las demás opciones son plantillas para proyectos típicos con los que te podrás familiarizar más adelante\nIndicar el nombre del proyecto\nIndicar el nombre del proyecto\nElegir la carpeta en la que se guardará el proyecto\nElegir la carpeta en la que se guardará el proyectoRecomiendo que sea la carpeta “R”\nHacer click en “Create project”\nHacer click en “Create project”RStudio te dará varias señales de que creaste exitosamente tu proyecto. También, te indicará cuál es el directorio de trabajo de tu proyecto.","code":""},{"path":"conociendo-R.html","id":"usar-un-proyecto","chapter":"Capítulo 1 R y el IDE RStudio","heading":"1.4.2 Usar un proyecto","text":"Al crear un nuevo proyecto, RStudio crea para ti una carpeta con un archivo que lleva un nombre tipo “*.Rproj”.Cuando estés fuera del proyecto bastará con hacer doble click en ese archivo para que RStudio abra una sesión de trabajo usando la ubicación del proyecto.Si deseas cerrar el proyecto actual para trabajar en otro, puedes hacerlo desde el menú “File” haciendo click en “Close Project.”","code":""},{"path":"rmarkdown.html","id":"rmarkdown","chapter":"Capítulo 2 Rmarkdown","heading":"Capítulo 2 Rmarkdown","text":"","code":""},{"path":"rmarkdown.html","id":"qué-es-rmarkdown","chapter":"Capítulo 2 Rmarkdown","heading":"2.1 ¿Qué es Rmarkdown?","text":"R Markdown nos provee de un marco de trabajo unificado para la ciencia de datos y el análisis de datos, combinando código, sus resultados, y los comentarios escritos por el autor. Los documentos R Markdown son totalmente reproducibles y soportan docenas de formatos de salida como PDFs, archivos Word, diapositivas, y más.Uno de los objetivos de este taller es que los participantes aprendan usar R Markdown y puedan encontrar la forma en que puede ayudarles potenciar su trabajo.Esta sección hace uso de la traducción al español del capítulo R Markdown de “R Data Science.”Los archivos R Markdown están diseñados para ser usados de tres maneras:Para comunicarte con los tomadores de decisiones, que quieren enfocarse en las conclusiones, en el código detrás del análisisPara colaborar con otros analistas de datos (incluyendo tu futuro yo), quienes están interesados tanto en tus conclusiones como en la manera en que llegaste ellas (el código)Como un entorno en el que realizar ciencia de datos, como un cuaderno de trabajo moderno en el que puedes capturar sólo lo que hiciste sino también en lo que estabas pensando.Típicamente, un archivo R Markdown contiene tres tipos de contenido importantesUn encabezado YAML (opcional) rodeado por — (tres guiones seguidos)Bloques de código rodeados de ``` (acentos graves)Texto mezclado con formato simple como # encabezados, cursivas o negritasCuando abres un archivo .Rmd, se te muestra una interfaz de bloc de notas donde el código y sus resultados se intercalan. Puedes ejecutar cada bloque de código haciendo click en el botón “Run” (luce como un botón de play en la parte superior del bloque), o presionando Cmd/Ctrl + Shift + Enter. RStudio ejecuta el código y muestra los resultados seguidamente.Para producir un reporte completo conteniendo todo el texto, código y resultados, haz click en “Knit” o presiona Cmd/Ctrl + Shift + K. Esto mostrará el reporte en un panel de Vista previa, y creará un archivo HTML que puedes compartir con otras personas.Cuando haces knit el documento (knit significa tejer en inglés), R Markdown envía el .Rmd knitr (http://yihui.name/knitr/) que ejecuta todos los bloques de código y crea un nuevo documento markdown (.md) que incluye el código y su output.El archivo markdown generado por knitr es procesado entonces por pandoc (http://pandoc.org/) que es el responsable de crear el archivo terminado. La ventaja de este flujo de trabajo en dos pasos es que puedes crear un muy amplio rango de formatos de salida, que conocerás más adelante.","code":""},{"path":"repaso-de-conceptos-estadísticos.html","id":"repaso-de-conceptos-estadísticos","chapter":"Capítulo 3 Repaso de conceptos estadísticos","heading":"Capítulo 3 Repaso de conceptos estadísticos","text":"","code":""},{"path":"repaso-de-conceptos-estadísticos.html","id":"medidas-representativas","chapter":"Capítulo 3 Repaso de conceptos estadísticos","heading":"3.1 Medidas representativas","text":"Vamos repasar los siguientes conceptos:PromedioMedianaModaRatioCuartilesPercentilesRangoRango intercuartilDesviación EstándarGeneralmente, cuando hablamos de medidas de tendencia central, nos referimos los tres primeros.Estas definiciones vienen directamente o adaptadas de Wikipedia.Vamos ver cómo se comportan estas medidas en dos conjuntos de datos:","code":"\nprimer_conjunto <- c(14, 14, 20, 20, 31, 31, 31, 42, 43, 50, 97)\nsegundo_conjunto <- c(14, 14, 20, 20, 31, 31, 31, 42, 43, 50, 2000)"},{"path":"repaso-de-conceptos-estadísticos.html","id":"promedio","chapter":"Capítulo 3 Repaso de conceptos estadísticos","heading":"3.1.1 Promedio","text":"Es un solo número tomado como representante de una lista de números. menudo, “promedio” se refiere la media aritmética, la suma de los números dividida por cuántos números se promedian.\\[\npromedio=\\frac{X_1 + X_2 + ... + X_n}{n}\n\\]Si tuviéramos estos 5 números:\\[\n11, 14, 16, 19, 20\n\\]El promedio se calcularía:\\[\n\\frac{11 + 14+16+19+20}{5}\n\\]Si tuviéramos estos 7 números:\\[\n100, 100, 100, 101, 153, 197, 2048\n\\]El promedio se calcularía:\\[\n\\frac{100+100+100+101+153+197+2048}{7}\n\\]El promedio es la medida más usada cuando se trata de resumir datos.Promedio de estaturaPromedio de estaturaPrecio promedio de un producto en el mercadoPrecio promedio de un producto en el mercadoPBI per cápita (promedio del producto bruto interno de una población)PBI per cápita (promedio del producto bruto interno de una población)Su principal ventaja es que tiene propiedades matemáticas que permiten hacer cálculos en base su valor. Por ejemplo: varianza, desviación estándar, ponderaciones, etc.Su principal desventaja es que es muy susceptible valores extremos o poco comunes.En R, usamos la función mean() para calcular el promedio de un listado de números.","code":"\nmean(primer_conjunto)\n#> [1] 35.72727\nmean(segundo_conjunto)\n#> [1] 208.7273"},{"path":"repaso-de-conceptos-estadísticos.html","id":"mediana","chapter":"Capítulo 3 Repaso de conceptos estadísticos","heading":"3.1.2 Mediana","text":"Un valor que representa la posición central en un listado de números ordenados. En otras palabras, divide el conjunto de datos en dos mitades.\\[\n10,11, 13, \\color{red}{16}, 19, 21, 23\n\\]Su principal ventaja es que es susceptible los valores extremos o atípicos.\\[\n10, 11, 13, \\color{red}{16}, 19, 21,2048\n\\]En R, usamos la función median() para calcular la mediana.","code":"\nmedian(primer_conjunto)\n#> [1] 31\nmedian(segundo_conjunto)\n#> [1] 31"},{"path":"repaso-de-conceptos-estadísticos.html","id":"moda","chapter":"Capítulo 3 Repaso de conceptos estadísticos","heading":"3.1.3 Moda","text":"La moda es el valor que aparece con mayor frecuencia en un conjunto de datos.\\[\n\\color{red}{11},\n\\color{red}{11}, 13, 15, 16\n\\]Ten en cuenta que en ciertos conjuntos de datos, puede haber más de una moda.\\[\n\\color{red}{11}, \\color{red}{11}, 13, 14, \\color{green}{16}, \\color{green}{16}, 18\n\\]Su utilidad es mayor cuando queremos resumir variables cualitativas.","code":""},{"path":"repaso-de-conceptos-estadísticos.html","id":"ratio","chapter":"Capítulo 3 Repaso de conceptos estadísticos","heading":"3.1.4 Ratio","text":"La razón es una relación binaria entre magnitudes. En el caso de números toda razón se puede expresar como una fracción y eventualmente como un decimal.En otras palabras, podemos usarla para expresar la relación entre dos mediciones.Por ejemplo:\\[\n\\frac{N\\, de\\, estudiantes}{N\\, de\\, docentes}\n\\]Por ejemplo:\\[\n\\frac{m^2}{habitantes}\n\\] Por ejemplo:\\[\n\\frac{ancho}{alto}\n\\]Para calcular un ratio en R, basta con aplicar una división:Quiere decir que por cada docente en la institución, hay 21 estudiantes.","code":"\nn_docentes <- 50\nn_estudiantes <- 1050\n\nratio <- n_estudiantes/n_docentes\n\nratio\n#> [1] 21"},{"path":"repaso-de-conceptos-estadísticos.html","id":"cuartiles-y-percentiles","chapter":"Capítulo 3 Repaso de conceptos estadísticos","heading":"3.1.5 Cuartiles y percentiles","text":"Del mismo modo que la mediana nos permite dividir el conjunto de datos en dos partes iguales, los cuartiles nos permiten dividir el conjunto de datos en cuatro partes iguales.También existen los percentiles, que permiten dividir el conjunto de datos en 100 partes iguales.R proporciona la función quantile() para encontrar la posición deseada. Recuerda que el percentil 25 es equivalente al cuartil 1 (25%) y el percentil 75 es equivalente al cuartil 3 (75%).También ten en cuenta que el percentil 50, el cuartil 2 y la mediana son el mismo valor.","code":"\n# Cuartil 1\nquantile(primer_conjunto, 0.25)\n#> 25% \n#>  20\n# Cuartil 3\nquantile(primer_conjunto, 0.75)\n#>  75% \n#> 42.5\nquantile(primer_conjunto, 0.5)\n#> 50% \n#>  31\nmedian(primer_conjunto)\n#> [1] 31"},{"path":"repaso-de-conceptos-estadísticos.html","id":"rango","chapter":"Capítulo 3 Repaso de conceptos estadísticos","heading":"3.1.6 Rango","text":"El Rango es el intervalo entre el valor máximo y el valor mínimo. Permite obtener una idea de la dispersión de los datos, cuanto mayor es el rango, aún más dispersos están los datos.Por ejemplo, en el siguiente conjunto de datos:\\[\n\\color{red}{11}, 13, 15, 16, 18, 21, \\color{green}{22} \n\\] El rango se calcula así:\\[\nRango = \\color{green}{22} - \\color{red}{11} = 9\n\\]En R, podemos obtenemos el intervalo con la función range() . Esto nos brinda el valor mínimo y máximo.Podemos calcular el valor específico con una operación sencilla:Recuerda que el valor será sensible los valores extremos.","code":"\nrange(primer_conjunto)\n#> [1] 14 97\nmax(primer_conjunto) - min(primer_conjunto)\n#> [1] 83\nmax(segundo_conjunto) - min(segundo_conjunto)\n#> [1] 1986"},{"path":"repaso-de-conceptos-estadísticos.html","id":"rango-intercuartil","chapter":"Capítulo 3 Repaso de conceptos estadísticos","heading":"3.1.7 Rango intercuartil","text":"Es una medida de dispersión basada en los cuartiles. Resultado de la diferencia entre el tercer y primer cuartil.\\[\nIQR = Q_3 - Q_1\n\\]En R se puede calcular con la función IQR():","code":"\nIQR(primer_conjunto)\n#> [1] 22.5\nquantile(primer_conjunto, 0.75) - quantile(primer_conjunto, 0.25)\n#>  75% \n#> 22.5"},{"path":"repaso-de-conceptos-estadísticos.html","id":"desviación-estándar","chapter":"Capítulo 3 Repaso de conceptos estadísticos","heading":"3.1.8 Desviación estándar","text":"Es una medida que se utiliza para cuantificar la variación o la dispersión de un conjunto de datos numéricos.Una desviación estándar baja indica que la mayor parte de los datos de una muestra tienden estar agrupados cerca de su media, mientras que una desviación estándar alta indica que los datos se extienden sobre un rango de valores más amplio.Será susceptible los valores extremos.En R, podemos calcular la desviación estándar con la función sd(), por (standard deviation).","code":"\nsd(primer_conjunto)\n#> [1] 23.57155\nsd(segundo_conjunto)\n#> [1] 594.218"},{"path":"repaso-de-conceptos-estadísticos.html","id":"tipos-de-variables","chapter":"Capítulo 3 Repaso de conceptos estadísticos","heading":"3.2 Tipos de variables","text":"","code":""},{"path":"repaso-de-conceptos-estadísticos.html","id":"variables-numéricas","chapter":"Capítulo 3 Repaso de conceptos estadísticos","heading":"3.2.1 Variables numéricas","text":"Las variables numéricas son aquellas que representan números, y con ellas se pueden realizar operaciones aritméticas. Por ejemplo:Número de estudiantesTasa de mortalidad infantilPeso corporalTemperaturaLas variables numéricas pueden ser continuas o discretas","code":""},{"path":"repaso-de-conceptos-estadísticos.html","id":"variables-numéricas-continuas","chapter":"Capítulo 3 Repaso de conceptos estadísticos","heading":"3.2.1.1 Variables numéricas continuas","text":"Son variables que tienen un número infinito de valores entre dos valores cualquiera. Es decir, son medidas dentro de un rango continuo infinito de valores. Algunos ejemplos:Longitud de un animalTiempo transcurrido entre comprasTemperatura de un hornoEstatura de una personaPor lo general estamos hablando de datos que se obtienen mediante procesos de medición.","code":""},{"path":"repaso-de-conceptos-estadísticos.html","id":"ejemplo","chapter":"Capítulo 3 Repaso de conceptos estadísticos","heading":"3.2.1.2 Ejemplo","text":"Tomamos la estatura de dos personas, la primera mide 1.70m y la segunda 1.73m. ¿Cuántos valores posibles de estatura existen entre 1.70 m y 1.73m?Podríamos estar tentados pensar que los únicos valores posibles serían 1.71m y 1.72m. Sin embargo, si tenemos un instrumento de medición más preciso podría darnos un valor de 1.701m, 1.7113m, 1.70000001, 1.729999999, etc. Es decir, entre dos valores cualquiera de estatura, podemos tener infinitos valores.","code":""},{"path":"repaso-de-conceptos-estadísticos.html","id":"variables-numéricas-discretas","chapter":"Capítulo 3 Repaso de conceptos estadísticos","heading":"3.2.1.3 Variables numéricas discretas","text":"Son variables que tienen un número contable de valores entre dos valores cualquiera. Algunos ejemplos:Total de goles en un partido de fútbolNúmero de quejas recibidas por un clienteNúmero de ventas realizadas en una semanaNúmero de hijos que una mujer dio luzPor lo general estamos hablando de datos que se obtienen mediante procesos de conteo o registro.","code":""},{"path":"repaso-de-conceptos-estadísticos.html","id":"ejemplo-1","chapter":"Capítulo 3 Repaso de conceptos estadísticos","heading":"3.2.1.4 Ejemplo","text":"Tomamos la cantidad de hijos que tuvieron dos mujeres, la primera tuvo 3 hijos y la segunda tuvo 6. ¿Cuántos valores posibles de número de hijos existen entre 3 y 6?En este caso, sí es posible decir que entre 3 y 6 sólo es posible tener 4 o 5 hijos. En ningún escenario posible una persona podría decir que tuvo 3.1, 4.5 o 5.999 hijos. Es decir, entre dos valores cualquiera de número de hijos por persona, tenemos un número limitado de valores posibles.","code":""},{"path":"repaso-de-conceptos-estadísticos.html","id":"salvedades","chapter":"Capítulo 3 Repaso de conceptos estadísticos","heading":"3.2.1.5 Salvedades","text":"En algunos casos, las variables discretas tienen un rango muy grande de valores potenciales y tiene sentido tratarlos como variables continuas en nuestras tareas estadísticas. Por ejemplo:Número de personas en un país (población)Número de árboles en un bosqueNúmero de animales en una reserva protegidaPiensa en la población de El Vaticano versus la población en China. ¿Cuántos valores potenciales de población existen entre ambos valores?","code":""},{"path":"repaso-de-conceptos-estadísticos.html","id":"variables-cualitativas-o-categóricas","chapter":"Capítulo 3 Repaso de conceptos estadísticos","heading":"3.2.2 Variables cualitativas o categóricas","text":"Se refieren características o atributos cuyas posibilidades de variación se expresan en función de números o cantidades. Las variables categóricas contienen un conjunto finito de categorías o grupos distintos. Por ejemplo:Posesión de servicio eléctrico en la vivienda (Sí, )Tipo de material del piso (Tierra, Cemento, Loseta, Parquet)Tipo de establecimiento de salud al que acudió una persona (Farmacia, Posta, Clínica, Hospital)Nivel de apoyo la democracia en una escala del 1 al 5Nivel educativo alcanzado (Sin nivel, Primaria, Secundaria, etc)Las variables categóricas pueden ser nominales u ordinales","code":""},{"path":"repaso-de-conceptos-estadísticos.html","id":"variables-categóricas-ordinales","chapter":"Capítulo 3 Repaso de conceptos estadísticos","heading":"3.2.2.1 Variables categóricas ordinales","text":"Las variables categóricas son ordinales cuando sí tienen un orden lógico natural. Es decir, las categorías representan valores que pueden ordenarse de menor mayor o viceversa. Por ejemplo:Nivel educativoGrado de apoyo la democracia (Bajo, Medio, Alto)Frecuencia de consumo de gaseosa (Diario, Semanal, Mensual, Anual, etc)","code":""},{"path":"repaso-de-conceptos-estadísticos.html","id":"variables-categóricas-nominales","chapter":"Capítulo 3 Repaso de conceptos estadísticos","heading":"3.2.2.2 Variables categóricas nominales","text":"Las variables categóricas son nominales cuando tienen un orden lógico natural. Es decir, las categorías representan valores que pueden ordenarse de menor mayor, o viceversa. Por ejemplo:Sexo (Hombre, Mujer)Región de nacimientoTipo de dispositivo (Smartphone, Laptop, PC de escritorio, Tablet)Compañía proveedora de internet","code":""},{"path":"repaso-de-conceptos-estadísticos.html","id":"tratamiento-de-las-variables-en-una-escala-gráfica","chapter":"Capítulo 3 Repaso de conceptos estadísticos","heading":"3.2.3 Tratamiento de las variables en una escala gráfica","text":"Cuando realizamos nuestros gráficos, la computadora trata todos nuestros datos como si fueran números.Miremos el gráfico de la siguiente diapositiva. Representa la cantidad de diamantes según su tipo de corte.El gráfico representa el recuento de observaciones por cada categoría de la variable corte.Antes de poder representar nuestros datos de forma gráfica, necesitamos, obviamente, tener los datos. En este caso, el set de datos luce de esta manera:Vemos que la variable corte es netamente categórica. Sin embargo, asume una posición en el eje X. Internamente, R trata las variables categóricas como numéricas discretas para poder representar su información en una escala gráfica.Por esto, de ahora en adelante, cuando nos refiramos variables discretas, nos estamos refiriendo tanto variables categóricas como numéricas discretas con poca cantidad de valores posibles.","code":"#> # A tibble: 5 x 2\n#>   corte     recuento\n#>   <ord>        <int>\n#> 1 Fair          1610\n#> 2 Good          4906\n#> 3 Very Good    12082\n#> 4 Premium      13791\n#> 5 Ideal        21551"},{"path":"gráficos.html","id":"gráficos","chapter":"Capítulo 4 Gráficos","heading":"Capítulo 4 Gráficos","text":"La habilidad de crear gráficos partir de los datos que recolectamos potencia nuestra capacidad de análisis. Los gráficos nos pueden ayudar percibir de manera rápida patrones de comportamiento en nuestra data y, al mismo tiempo, resumir de manera visual aquello que queremos mostrar nuestra audiencia.Esta sesión tiene como objetivo explicar el uso de la gramática de los gráficos, un marco conceptual cuya aplicación permite realizar visualizaciones de datos de manera sencilla y coherente. vamos buscar explicar todos los elementos teóricos que existen detrás del marco conceptual mencionado. En cambio, preferimos explicar sólo los elementos clave, usando ejemplos claros para que, al finalizar la, cualquiera pueda intentar crear sus propios gráficos.somos las primeras personas en tratar de explicar este tema. De hecho, este tutorial será una adaptación del gran trabajo realizado por Chester Ismay y Albert Y. Kim en su libro Statistical Inference via Data Science: ModernDive R Tidyverse.","code":""},{"path":"gráficos.html","id":"conjunto-de-datos-de-ejemplo","chapter":"Capítulo 4 Gráficos","heading":"4.1 Conjunto de datos de ejemplo","text":"Durante esta sesión usaremos el conjunto de datos gapminder que viene incluido dentro del paquete gapminder para los gráficos de ejemplo. Si aún cuentas con el paquete, puedes instalarlo usando el siguiente código en la consola.La instalación de paquetes es un proceso que debe realizarse una sola vez. Cuando requieras usar un paquete instalado debes llamarlo usando la función library().Recuerda que gapminder es un set de datos que ha sido previamente limpiado y ordenado. Normalmente, estos son pasos previos que debe realizar el analista de datos.","code":"\ninstall.packages(\"gapminder\")\nlibrary(gapminder)\ngapminder\n#> # A tibble: 1,704 x 6\n#>    country     continent  year lifeExp      pop gdpPercap\n#>    <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n#>  1 Afghanistan Asia       1952    28.8  8425333      779.\n#>  2 Afghanistan Asia       1957    30.3  9240934      821.\n#>  3 Afghanistan Asia       1962    32.0 10267083      853.\n#>  4 Afghanistan Asia       1967    34.0 11537966      836.\n#>  5 Afghanistan Asia       1972    36.1 13079460      740.\n#>  6 Afghanistan Asia       1977    38.4 14880372      786.\n#>  7 Afghanistan Asia       1982    39.9 12881816      978.\n#>  8 Afghanistan Asia       1987    40.8 13867957      852.\n#>  9 Afghanistan Asia       1992    41.7 16317921      649.\n#> 10 Afghanistan Asia       1997    41.8 22227415      635.\n#> # ... with 1,694 more rows"},{"path":"gráficos.html","id":"la-gramática","chapter":"Capítulo 4 Gráficos","heading":"4.2 La gramática","text":"El paquete ggplot2, elaborado por Hadley Wickham es la implementanción en R de la gramática de los gráficos, teoría desarrollada por Leland Wilkinson.Puedes cargar ggplot2 individualmente o junto con los paquetes del tidyverse.Del mismo modo que para construir una oración en nuestro idioma, hacemos uso de combinaciones de palabras (que pueden ser sustantivos, verbos, adjetivos, etc) siguiendo un conjunto de reglas conocido como gramática, la gramática de los gráficos nos brinda las reglas para construir gráficos estadísticos.","code":"\n# Sólo ggplot2\nlibrary(ggplot2)\n# Todo el tidyverse\nlibrary(tidyverse)"},{"path":"gráficos.html","id":"componentes-de-la-gramática","chapter":"Capítulo 4 Gráficos","heading":"4.2.1 Componentes de la gramática","text":"En pocas palabras, la gramática de los gráficos nos quiere decir que:Un gráfico estadístico es el mapeo de variables en nuestra data hacia atributos estéticos de figuras geométricas.Podemos construir un gráfico partir de tres componentes esenciales:data: el set de datos que contiene las variables de interésgeom: las figuras geométricas en cuestión. Nos referimos al tipo de objeto que podemos observar en un gráfico. Por ejemplo: puntos, líneas o barras.aes: los atributos estéticos de la figura geométrica. Por ejemplo, su posición en los ejes x/y, color, forma y tamaño. Los atributos estéticos son mapeados las variables contenidas en nuestro set de datos.","code":""},{"path":"gráficos.html","id":"un-breve-ejemplo","chapter":"Capítulo 4 Gráficos","heading":"4.2.2 Un breve ejemplo","text":"Para mostrar lo simple que puede resultar graficar usando los componentes mencionados, usaremos datos del paquete gapminder. Para este primer ejemplo utilizaremos sólo los datos de expectativa de vida en Perú lo largo de los años. Para ello crearemos datos_peru usando algunas funciones del paquete dplyr.Ahora que tenemos df_ejemplo, sólo necesitamos usar dos líneas de código para ver la evolución de la expectativa de vida de los peruanos. Recuerda que para ello hemos cargado previamente ggplot2.¿Cómo funciona la gramática? Anteriormente te habíamos mencionado que ggplot requiere tres componentes básicos para crear gráficos: los datos, el mapeo de variables y las figuras geométricas que representarán nuestros datos.En el código anterior:Le indicamos la función ggplot() que nuestra data será df_ejemplo.Con mapping le pedimos que mapee la variable year al eje X y la variable lifeExp al eje Y.Además de hacer esto, es necesario indicarle qué figura geométrica debe usar ggplot para representar nuestros datos. Esta instrucción se la indicamos con geom_line(), pidiendole que lo haga con una línea.","code":"\nlibrary(dplyr)\n#> \n#> Attaching package: 'dplyr'\n#> The following objects are masked from 'package:stats':\n#> \n#>     filter, lag\n#> The following objects are masked from 'package:base':\n#> \n#>     intersect, setdiff, setequal, union\n\ndatos_peru <- filter(gapminder, country == \"Peru\")\nggplot(data = datos_peru, mapping = aes(x = year, y = lifeExp)) +\n  geom_line()"},{"path":"gráficos.html","id":"ggplot-conciso","chapter":"Capítulo 4 Gráficos","heading":"4.2.3 ggplot conciso","text":"Debido que el primer argumento siempre será nuestra data, y en el mapeo de variables los dos primeros atributos siempre corresponden al eje X y al eje Y, podemos reescribir el código del gráfico anterior de forma más concisa.Para estos parámetros tan comunes (data,x, y), necesitamos especificar su nombre cada vez.","code":"\nggplot(datos_peru, aes(year, lifeExp)) + \n  geom_line()"},{"path":"gráficos.html","id":"comparación","chapter":"Capítulo 4 Gráficos","heading":"4.2.4 Comparación","text":"","code":"\nggplot(data = datos_peru, mapping = aes(x = year, y = lifeExp)) +\n  geom_line()\nggplot(datos_peru, aes(year, lifeExp)) + \n  geom_line()"},{"path":"gráficos.html","id":"almacenar-gráfico","chapter":"Capítulo 4 Gráficos","heading":"4.3 Almacenar gráfico","text":"Los gráficos creados con ggplot() son un nuevo tipo de objeto. Como tal, puede usarse el operador de asignamiento (<-) para almacenarlos en nuestro Environment. Por ejemplo, creamos el objeto gráfico.Ahora sólo haría falta agregarle una geometría. Para ello, hacemos uso del operador de adición (+). Mira lo fácil que es cambiar entre un gráfico de líneas, de columnas y de puntos.¿Cómo determinar el correcto tipo de gráficos según los datos que tengo?¿En qué casos debo usar columnas?¿En qué casos debo usar puntos?","code":"\ngrafico <- ggplot(datos_peru, aes(year, lifeExp))\ngrafico +\n    geom_line()\ngrafico +\n    geom_col()\ngrafico +\n    geom_point()"},{"path":"gráficos.html","id":"los-cinco-gráficos-nombrados","chapter":"Capítulo 4 Gráficos","heading":"4.4 Los cinco gráficos nombrados","text":"Con el fin de conseguir una explicación simple, nos limitamos mostrar cinco tipos de gráfico que son de uso común y que además permiten entender los usos de la gramática en su forma básica.","code":""},{"path":"gráficos.html","id":"gráfico-de-barras-o-columnas","chapter":"Capítulo 4 Gráficos","heading":"4.4.1 Gráfico de barras o columnas","text":"El primer tipo de gráfico que veremos es el de barras. Resulta muy útil para mostrar estadísticas de resumen de nuestros datos categóricos. Por ejemplo, podemos ver cuántos países encontramos por continente en las observaciones de gapminder correspondientes al año 2002 y su promedio de expectativa de vida. Podemos obtener esa información usando funciones de dplyr.Si queremos contar con columnas verticales, mapeamos nuestra variable discreta al eje X y nuestra variable numérica al eje Y.Con esta información, podemos dibujar nuestro primer gráfico de barras haciendo uso de geom_col().","code":"\n(paises_por_continente <- gapminder %>% \n  filter(year == 2002) %>% \n  group_by(continent) %>% \n  summarise(\n    recuento = n(),\n    promedio_exp = mean(lifeExp)\n  ) %>% \n  ungroup())\n#> # A tibble: 5 x 3\n#>   continent recuento promedio_exp\n#>   <fct>        <int>        <dbl>\n#> 1 Africa          52         53.3\n#> 2 Americas        25         72.4\n#> 3 Asia            33         69.2\n#> 4 Europe          30         76.7\n#> 5 Oceania          2         79.7\nggplot(paises_por_continente, aes(continent, recuento)) +\n  geom_col()"},{"path":"gráficos.html","id":"gráfico-de-líneas","chapter":"Capítulo 4 Gráficos","heading":"4.4.2 Gráfico de líneas","text":"El siguiente tipo de gráfico ya lo conocemos. Consiste en líneas que nos sirven generalmente para analizar la evolución en el tiempo de determinadas variables. Debido ello, es muy común mapear en el exe X alguna variable de tiempo, y en el eje Y alguna variable continua, que sería nuestra variable de interés.Con gapminder podemos analizar la evolución del PBI per cápita peruano de 1952 2007. Para ello filtraremos sólo las observaciones pertenecientes Perú. Para generar el gráfico de líneas usamos geom_line().¿En qué periodo se ve una gran caída? ¿Cuántos años fueron necesarios para recuperar la misma cifra? Este tipo de preguntas son las que un gráfico de líneas nos permite revisar.","code":"\nggplot(datos_peru, aes(year, gdpPercap)) +\n  geom_line()"},{"path":"gráficos.html","id":"histogramas","chapter":"Capítulo 4 Gráficos","heading":"4.4.3 Histogramas","text":"Es posible hacer otro tipo de análisis usando una sola variable. El gráfico de columnas nos permitía ver cómo se distribuyen las observaciones de nuestras variables discretas. Podemos esperar que exista un gráfico que nos muestre la distribución de variables continuas.Esto lo conseguimos con los histogramas. En lugar de mostrar la frecuencia de observaciones según categorías, nos permiten agrupar los datos por intervalos. Veamos cómo se distribuye el PBI per cápita de todos los países del mundo en el año 2007. Para generar el histograma usamos geom_histogram(). Por defecto, ggplot() divide nuestra data en 30 intervalos.En este caso, sólo indicaremos la variable del eje X, porque el eje Y se calcula en base los intervalos automáticos.Con esto podemos responder alguna preguntas como:¿Cuál es el valor más pequeño?¿Y el más alto?¿Cuál es el valor “central” o “más típico?”¿Qué tan dispersos están los valores?¿Qué valores son muy frecuentes?¿Cuáles son infrecuentes?","code":"\ndatos_2007 <- filter(gapminder, year == 2007)\nggplot(datos_2007, aes(gdpPercap)) +\n  geom_histogram()\n#> `stat_bin()` using `bins = 30`. Pick better value with\n#> `binwidth`."},{"path":"gráficos.html","id":"diagramas-de-caja-o-boxplot","chapter":"Capítulo 4 Gráficos","heading":"4.4.4 Diagramas de caja o boxplot","text":"Otra manera de ver la distribución de nuestros valores es haciendo uso de diagramas de caja o boxplot. En este caso, es más entenderlo si primero hemos visto alguno. Para dibujarlo, usamos geom_boxplot().Para obtener una caja que represente todo nuestro conjunto de datos, sólo necesitamos especificar el eje X.Vemos una especie de “caja” que busca representar nuestros valores. La línea negra remarcada al centro de la caja nos indica dónde encontramos el punto medio de nuestros datos (la mediana). Esta representación nos permite ubicar nuestros datos en cuatro segmentos importantes:Todo lo que está “fuera” de la caja en el lado izquierdo representa el primer 25% de nuestros datos, también conocido como el primer cuartil o cuartil inferior. Son los valores más bajos.Todo lo que está en la primera mitad de la “caja” representa el segundo 25% de nuestros datos, conocido el segundo cuartil.Todo lo que está en la segunda mitad de la “caja” representa el tercer 25% de nuestros datos, conocido como el tercer cuartil.Todo lo que está “fuera” de la caja en el lado derecho, representa el cuarto 25% de nuestros datos, también conocido como el cuarto cuartil o cuartil superior. Son los valores más altos.Habrás podido notar que además aparecen algunos puntos dibujados fuera de nuestros cuatro segmentos. Estos representan valores extremos, también conocidos como outliers. Pueden aparecer tanto en el lado más alto como en el más bajo de nuestros datos. Para determinar su existencia se utiliza un cálculo usando el Rango Intercuartil. Si entiendes esta parte por ahora, te preocupes, con que entiendas que son valores extremos es suficiente.Algo muy útil que nos permiten hacer los boxplot es comparar la distribución de nuestros valores entre diferentes categorías. Para ello, podemos mapear una variable discreta al eje Y. Por ejemplo, el PBI per cápita de los cinco continentes.De esta manera, podemos ver que incluso los valores más altos de PBI en África alcanzan los valores medianos de Europa y Oceanía. También podemos ver que aunque Asia tiene países con valores de PBI per cápita comparables con los más altos de Europa, al menos la mitad de sus países se ubica en los niveles de África.","code":"\nggplot(datos_2007, aes(gdpPercap)) +\n  geom_boxplot()\nggplot(datos_2007, aes(gdpPercap, continent)) +\n  geom_boxplot()"},{"path":"gráficos.html","id":"diagrama-de-dispersión-o-puntos","chapter":"Capítulo 4 Gráficos","heading":"4.4.5 Diagrama de dispersión o puntos","text":"Además de ver las características de una variable en particular, ya sea viendo su evolución en el tiempo o su distribución, podemos pensar en cómo analizar la relación entre nuestras variables. Por ejemplo, ¿qué relación existe entre el PBI per cápita y la expectativa de vida? Piensa un poco en esto y trata de responder la siguiente pregunta: ¿Existirá mayor expectativa de vida en países que tienen un PBI per cápita alto?Para responder esto podemos hacer uso de un diagrama de dispersión, también conocido como diagrama de puntos. Nos sirve para ver la relación existente entre dos variables continuas, también conocida como correlación.continuación, analizaremos la relación entre el PBI per cápita y la expectativa de vida de todos los países en el año 2007. Para dibujar nuestro diagrama de puntos, hacemos uso de geom_point(). Las variables de interés van en cada uno de nuestros ejes. En este caso, como esperamos que el PBI per cápita influya en la epectativa de vida, lo colocamos en el eje X. Cada uno de los puntos de nuestro gráfico corresponde un país.Algo que podemos notar rápidamente es que existen gran cantidad de países con un PBI per cápita bajo, esto hace que haya mucha aglomeración en esa parte del gráfico. Aunque esto nos dificulta un poco el análisis, podemos ir respondiendo la siguiente pregunta: ¿La expectativa de vida en los países con mayor PBI per cápita es alta o baja?Para ver la distribución en los países con menor PBI per cápita podemos filtrar sólo los valores menores 10000.Nuevamente, podemos ver que los países con mayor PBI per cápita tienen la expectativa de vida más alta. Sin embargo, ahora además podemos ver con mayo claridad que aunque en los países con menor PBI per cápita la expectativa de vida es variada, generalmente se encuentra en los valores más bajos.","code":"\nggplot(datos_2007, aes(gdpPercap, lifeExp)) +\n  geom_point()\ndatos_2007_filtrado <- filter(datos_2007, gdpPercap < 10000)\nggplot(datos_2007_filtrado, aes(gdpPercap, lifeExp)) +\n  geom_point()"},{"path":"gráficos.html","id":"personalización-de-las-geometrías","chapter":"Capítulo 4 Gráficos","heading":"4.5 Personalización de las geometrías","text":"Hasta el momento hemos conocido cómo cambiar en nuestras geometrías los atributos estéticos de posición en los ejes X y Y. Sin embargo, cuando pensamos tradicionalmente en atributos estéticos, hay otro tipo de características que también nos vienen la mente.Tres de ellas pueden ser el color, tamaño y forma de las figuras geométricas que utilizamos en nuestros gráficos. Con ggplot2 podemos mapear alguna variable de nuestro set de datos estos atributos.","code":""},{"path":"gráficos.html","id":"color-y-relleno","chapter":"Capítulo 4 Gráficos","heading":"4.5.1 Color y relleno","text":"Pensemos en un gráfico de barras. Habíamos visto que es posible crearlo usando geom_bar(). Por ejemplo, la cantidad de países en cada continente para el año 2007.El gráfico nos permite identificar una columna con cada uno de los continentes, pero para ello es necesario leer las etiquetas en el eje X. Otra manera de saber que estamos refiriéndonos continentes distintos es haciendo uso del atributo fill, que se refiere al relleno de las barras.Vemos que además de colorear cada una de nuestras barras, ggplot2 automáticamente le agrega una leyenda nuestro gráfico para saber qué categoría representa cada color mostrado. En un gráfico de barras, esta información ya la presentaban las etiquetas del eje X.Para poder apreciar cómo el color nos puede apreciar explotar nuestros datos, agreguémosle color de relleno un diagrama de puntos. Recordemos que para ello hacemos uso de geom_point(). Por ejemplo, para ver la relación entre PBI per cápita y esperanza de vida en el año 2007. Haciendo uso del color, podemos ver cómo se posicionan los países según su continente.Podemos seguir viendo que existe una relación positiva entre PBI per cápita y expectativa de vida, pero además ahora podemos ver qué continente pertenecen los países con PBI per cápita más alto y más bajo.Sin embargo, te habrás dado cuenta que para el código de barras hemos usado el argumento fill pero en el diagrama de puntos hemos usado color.¿Por qué la diferencia? Tiene que ver con la figura geométrica que estamos utilizando. Por lo general debemos entenderlo de la siguiente manera:fill: permite modificar el relleno de la figura.color: permite modificar los bordes o líneas de la figura.","code":"\nggplot(datos_2007, aes(continent)) +\n  geom_bar()\nggplot(datos_2007, aes(continent, fill = continent)) +\n  geom_bar()\nggplot(datos_2007, aes(gdpPercap, lifeExp, color = continent)) +\n  geom_point()"},{"path":"gráficos.html","id":"tamaño","chapter":"Capítulo 4 Gráficos","heading":"4.5.2 Tamaño","text":"Del mismo, usar el atributo de tamaño nos permite identificar nueva información acerca de nuestros datos. Por ejemplo, podemos ver la población de los países en nuestro diagrama de puntos para hacernos una idea de quiénes representa. Para ello, usamos el argumento size y lo mapeamos la variable pop.Nuevamente, ggplot2 nos proporciona una leyenda automática. Así podemos ver que para el año 2007, los países con los valores de población más extremos, tienen un PBI per cápita bajo. Podemos combinar al mismo tiempo el uso de tamaño con el color para ver también la distribución según continentes.¿Qué punto crees que representa China?¿Qué punto crees que representa EEUU?¿Qué punto crees que representa Australia?","code":"\nggplot(datos_2007, aes(gdpPercap, lifeExp, size = pop)) +\n  geom_point()\nggplot(datos_2007, aes(gdpPercap, lifeExp, size = pop, color = continent)) +\n  geom_point()"},{"path":"gráficos.html","id":"forma","chapter":"Capítulo 4 Gráficos","heading":"4.5.3 Forma","text":"Debes tener en cuenta que todo el mundo percibe los colores de la misma manera. En casos como esos, usar una forma distinta para nuestras categorías permite mostrar con mayor claridad las diferencias. Para ello, usamos el atributo shape.","code":"\nggplot(datos_2007, aes(gdpPercap, lifeExp, shape = continent, color = continent)) +\n  geom_point()"},{"path":"gráficos.html","id":"etiquetas","chapter":"Capítulo 4 Gráficos","heading":"4.6 Etiquetas","text":"Por último, usar etiquetas significativas hará que nuestros gráficos hablen por sí solos. Para ello, agregamos la función labs() nuestro gráfico. En ella, entre otras cosas, podemos modificar lo siguiente:title: el título principal de nuestro gráficosubtitle: el subtítulo del gráficocaption: la nota al pie de nuestro gráficox: la etiqueta del eje Xy: la etiqueta del eje YConservamos grafico_puntos para usarlo como ejemplo.","code":"\ngrafico_dispersion <- ggplot(datos_2007, aes(gdpPercap, lifeExp, shape = continent, color = continent)) +\n  geom_point()\ngrafico_dispersion"},{"path":"gráficos.html","id":"usando-labs-para-títulos","chapter":"Capítulo 4 Gráficos","heading":"4.6.1 Usando labs() para títulos","text":"","code":"\ngrafico_dispersion +\n  labs(title = \"Relación entre PBI per cápita y expectativa de vida\",\n       subtitle = \"Los cinco continentes en el año 2007\")"},{"path":"gráficos.html","id":"usando-labs-para-los-ejes","chapter":"Capítulo 4 Gráficos","heading":"4.6.2 Usando labs() para los ejes","text":"","code":"\ngrafico_dispersion +\n  labs(x = \"PBI per cápita\",\n       y = \"Expectativa de Vida\")"},{"path":"gráficos.html","id":"usando-labs-para-caption-y-leyenda","chapter":"Capítulo 4 Gráficos","heading":"4.6.3 Usando labs() para caption y leyenda","text":"","code":"\ngrafico_dispersion +\n  labs(caption = \"Fuente: Proyecto gapminder\",\n       color = \"Continente\", shape = \"Continente\")"},{"path":"gráficos.html","id":"combinando-todas-las-etiquetas","chapter":"Capítulo 4 Gráficos","heading":"4.6.4 Combinando todas las etiquetas","text":"Podemos juntar todas las etiquetas dentro de una misma llamada labs(). De paso, guardamos grafico_final() para usarlo más adelante.","code":"\ngrafico_final <- grafico_dispersion +\n  labs(title = \"Relación entre PBI per cápita y expectativa de vida\",\n       subtitle = \"Los cinco continentes en el año 2007\",\n       caption = \"Fuente: Proyecto gapminder\",\n       x = \"PBI per cápita\",\n       y = \"Expectativa de Vida\",\n       color = \"Continente\",\n       shape = \"Continente\")\ngrafico_final"},{"path":"gráficos.html","id":"temas-theme","chapter":"Capítulo 4 Gráficos","heading":"4.7 Temas (theme)","text":"Es probable que además de cambiar los colores, forma y etiquetas de un gráfico, busques modificar otros elementos estéticos que corresponden datos.Lamentablemente, escapa de la finalidad de esta sesión llegar enseñarte esto. Sin embargo, ggplot2 viene con temas predefinidos que te pueden permitir ahorrarte el trabajo de hacerlos por ti mismo.continuación, algunos ejemplos de estos modelos aplicados grafico_final.","code":"\ngrafico_final +\n    theme_bw()\ngrafico_final +\n    theme_classic()\ngrafico_final +\n    theme_light()\ngrafico_final +\n    theme_minimal()\ngrafico_final +\n    theme_void()"},{"path":"gráficos.html","id":"ggthemes","chapter":"Capítulo 4 Gráficos","heading":"4.7.1 ggthemes","text":"También existen otros paquetes que incluyen temas para gráficos. Uno de los más conocidos es ggthemes.Para instalarlo.Una vez instalado, olvides llamarlo con library() para usar sus temas.","code":"\ninstall.packages(\"ggthemes\")\nlibrary(ggthemes)\ngrafico_final +\n    theme_base()\ngrafico_final +\n    theme_calc()\ngrafico_final +\n    theme_clean()\ngrafico_final +\n    theme_economist()\ngrafico_final +\n    theme_wsj()\ngrafico_final +\n    theme_stata()"},{"path":"gráficos.html","id":"más-allá-de-lo-evidente","chapter":"Capítulo 4 Gráficos","heading":"4.8 Más allá de lo evidente","text":"Si deseas conocer más sobre ggplot2 puedes revisar su libro oficial y su “Cookbook” oficial.Libro: Teoría y ejemplos clarosCookbook: Ejemplos extensivos","code":""},{"path":"importación-de-datos.html","id":"importación-de-datos","chapter":"Capítulo 5 Importación de datos","heading":"Capítulo 5 Importación de datos","text":"siempre todos los datos con los que queremos trabajar vienen dentro de un paquete de R.\nDe hecho, la mayoría de veces vamos querer trabajar con un archivo de datos que está en nuestra computadora. Pueden ser datos que hemos recolectado por nuestra cuenta o que hemos descargado de alguna fuente en internet.Estos archivos pueden encontrarse en diferentes formatos, siendo uno de los más populares el de Ms Excel. Otros tipos de archivos que quizás conozcas pueden ser SPSS o Stata.Los ejemplos asumen que tienes tus datos dentro de una carpeta llamada “data” en tu proyecto.La data importar en la práctica se encuentra en una carpeta de Google Drive para su descarga. olvides ubicar todos los archivos descargados dentro de la carpeta “data” de tu proyecto.Ahora deberías contar con todos estos archivos en tu carpeta “data.”En la carpeta “data” contamos con cinco tipos de archivos:*.txt: Texto separado por un delimitador arbitrario.*.tsv: Texto separado por tabulaciones*.csv: Texto separado por comas*.xlsx: Archivo de Excel*.SAV: Archivo de SPSS","code":""},{"path":"importación-de-datos.html","id":"paquetes-necesarios","chapter":"Capítulo 5 Importación de datos","heading":"5.1 Paquetes necesarios","text":"Existen paquetes especializados para cada tipo de datos que deseamos descargar.\nEn esta oportunidad, aprenderemos usar los siguientes.readr: Para archivos de textoreadxl: Para archivos de Excelhaven: Para archivos de SPSS y StataTodos estos paquetes se descagaron cuando instalaste tidyverse.Una característica común de todos los paquetes presentados es que al leer los datos en R, se crean como tibbles, un formato de trabajo para datos tabulares que existe sólo en R. Además de ello, sus funciones comparten elementos en su interfaz (API), lo que permite trabajar con distintos tipos de datos realizando cambios mínimos.","code":""},{"path":"importación-de-datos.html","id":"importación-de-archivos-de-texto","chapter":"Capítulo 5 Importación de datos","heading":"5.2 Importación de archivos de texto","text":"","code":""},{"path":"importación-de-datos.html","id":"cargar-readr","chapter":"Capítulo 5 Importación de datos","heading":"5.2.1 Cargar readr","text":"Para acceder las funciones de un paquete, siempre debemos primero cargarlo haciendo uso de library().Alternativamente, podemos cargarlo junto toda la colección de paquetes del tidyverse.La función que nutre el núcleo de readr es read_delim(). Nos permitirá leer prácticamente todo tipo de archivos de texto siempre y cuando le indiquemos el tipo de delimitador.Exploremos los archivos de texto en nuestra carpeta “data.”","code":"\nlibrary(readr)\nlibrary(tidyverse)\n#> -- Attaching packages ------------------- tidyverse 1.3.1 --\n#> v ggplot2 3.3.5     v purrr   0.3.4\n#> v tibble  3.1.4     v dplyr   1.0.7\n#> v tidyr   1.1.4     v stringr 1.4.0\n#> v readr   2.0.2     v forcats 0.5.1\n#> -- Conflicts ---------------------- tidyverse_conflicts() --\n#> x dplyr::filter() masks stats::filter()\n#> x dplyr::lag()    masks stats::lag()"},{"path":"importación-de-datos.html","id":"leer-datos-csv","chapter":"Capítulo 5 Importación de datos","heading":"5.2.2 Leer datos csv","text":"Los archivos de valores separados por comas (Comma Separated Values) son de los más utilizados en el mundo del análisis de datos debido que prácticamente cualquier software puede reconocerlos.Son archivos de texto que representan datos tabulares en los que los valores de cada columna están separados por comas.Para leer estos archivos, usamos la función read_csv() del paquete readr.Al ejecutar el código, obtenemos dos tipos de output. El primero nos indica que la lectura asignó cada columna cierto tipo de datos. Este tipo de output es un simple mensaje (message).El segundo output nos indica el objeto obtenido (un tibble), con la cantidad de filas y columnas que contiene. Además, nos brinda las diez primeras filas de la información obtenida, y el nombre y tipo de cada columna. Si este conjunto de datos tuviera más columnas, sólo se nos mostraría la cantidad de columnas que alcances en nuestra ventana.","code":"\nread_csv(\"data/gapminder_comas.csv\")  \n#> Rows: 1704 Columns: 6\n#> -- Column specification ------------------------------------\n#> Delimiter: \",\"\n#> chr (2): country, continent\n#> dbl (4): year, lifeExp, pop, gdpPercap\n#> \n#> i Use `spec()` to retrieve the full column specification for this data.\n#> i Specify the column types or set `show_col_types = FALSE` to quiet this message.\n#> # A tibble: 1,704 x 6\n#>    country     continent  year lifeExp      pop gdpPercap\n#>    <chr>       <chr>     <dbl>   <dbl>    <dbl>     <dbl>\n#>  1 Afghanistan Asia       1952    28.8  8425333      779.\n#>  2 Afghanistan Asia       1957    30.3  9240934      821.\n#>  3 Afghanistan Asia       1962    32.0 10267083      853.\n#>  4 Afghanistan Asia       1967    34.0 11537966      836.\n#>  5 Afghanistan Asia       1972    36.1 13079460      740.\n#>  6 Afghanistan Asia       1977    38.4 14880372      786.\n#>  7 Afghanistan Asia       1982    39.9 12881816      978.\n#>  8 Afghanistan Asia       1987    40.8 13867957      852.\n#>  9 Afghanistan Asia       1992    41.7 16317921      649.\n#> 10 Afghanistan Asia       1997    41.8 22227415      635.\n#> # ... with 1,694 more rows"},{"path":"importación-de-datos.html","id":"almacenar-datos-importados","chapter":"Capítulo 5 Importación de datos","heading":"5.2.3 Almacenar datos importados","text":"Si deseamos usar los datos obtenidos para un análisis posterior, como probablemente sea el caso, es necesario almacenar la tabla generada haciendo uso del operador de asignación <-. El nombre indicado aparecerá en nuestro panel “Environment.”Vemos que volvemos obtener el mensaje, pero esta vez se nos muestran los datos. Esto sucede porque al asignarle un nombre, le hemos indicado R que queremos acceder los datos sólo cuando se lo indiquemos explícitamente. Para hacer ello, simplemente tipeamos el nombre que le asignamos al conjunto de datos.En esta ocasión, sí obtenemos la información contenida en el conjunto de datos, pero el mensaje. Esto sucede porque los mensajes sólo nos muestran información relevante al momento de ejecutar una función, como lo es read_csv().","code":"\ndatos_obtenidos_csv <- read_csv(\"data/gapminder_comas.csv\")\n#> Rows: 1704 Columns: 6\n#> -- Column specification ------------------------------------\n#> Delimiter: \",\"\n#> chr (2): country, continent\n#> dbl (4): year, lifeExp, pop, gdpPercap\n#> \n#> i Use `spec()` to retrieve the full column specification for this data.\n#> i Specify the column types or set `show_col_types = FALSE` to quiet this message.\ndatos_obtenidos_csv\n#> # A tibble: 1,704 x 6\n#>    country     continent  year lifeExp      pop gdpPercap\n#>    <chr>       <chr>     <dbl>   <dbl>    <dbl>     <dbl>\n#>  1 Afghanistan Asia       1952    28.8  8425333      779.\n#>  2 Afghanistan Asia       1957    30.3  9240934      821.\n#>  3 Afghanistan Asia       1962    32.0 10267083      853.\n#>  4 Afghanistan Asia       1967    34.0 11537966      836.\n#>  5 Afghanistan Asia       1972    36.1 13079460      740.\n#>  6 Afghanistan Asia       1977    38.4 14880372      786.\n#>  7 Afghanistan Asia       1982    39.9 12881816      978.\n#>  8 Afghanistan Asia       1987    40.8 13867957      852.\n#>  9 Afghanistan Asia       1992    41.7 16317921      649.\n#> 10 Afghanistan Asia       1997    41.8 22227415      635.\n#> # ... with 1,694 more rows"},{"path":"importación-de-datos.html","id":"leer-datos-tsv","chapter":"Capítulo 5 Importación de datos","heading":"5.2.4 Leer datos TSV","text":"Otra manera de almacenar datos es usando uso de archivos de valores separados por tabulaciones (Tab Separated Values)Para leer estos archivos, hacemos uso de la función read_tsv().Nuevamente, la función nos comunica mediante un mensaje qué tipo de columnas ha identificado.Podemos inspeccionar el contenido de este conjunto de datos del mismo modo anterior.","code":"\ndatos_obtenidos_tsv <- read_tsv(\"data/gapminder_tabs.tsv\")\n#> Rows: 1704 Columns: 6\n#> -- Column specification ------------------------------------\n#> Delimiter: \"\\t\"\n#> chr (2): country, continent\n#> dbl (4): year, lifeExp, pop, gdpPercap\n#> \n#> i Use `spec()` to retrieve the full column specification for this data.\n#> i Specify the column types or set `show_col_types = FALSE` to quiet this message.\ndatos_obtenidos_tsv\n#> # A tibble: 1,704 x 6\n#>    country     continent  year lifeExp      pop gdpPercap\n#>    <chr>       <chr>     <dbl>   <dbl>    <dbl>     <dbl>\n#>  1 Afghanistan Asia       1952    28.8  8425333      779.\n#>  2 Afghanistan Asia       1957    30.3  9240934      821.\n#>  3 Afghanistan Asia       1962    32.0 10267083      853.\n#>  4 Afghanistan Asia       1967    34.0 11537966      836.\n#>  5 Afghanistan Asia       1972    36.1 13079460      740.\n#>  6 Afghanistan Asia       1977    38.4 14880372      786.\n#>  7 Afghanistan Asia       1982    39.9 12881816      978.\n#>  8 Afghanistan Asia       1987    40.8 13867957      852.\n#>  9 Afghanistan Asia       1992    41.7 16317921      649.\n#> 10 Afghanistan Asia       1997    41.8 22227415      635.\n#> # ... with 1,694 more rows"},{"path":"importación-de-datos.html","id":"leer-datos-con-delimitador-arbitrario","chapter":"Capítulo 5 Importación de datos","heading":"5.2.5 Leer datos con delimitador arbitrario","text":"Para archivos de texto con cualquier otro tipo de delimitador, usamos la función read_delim(), que además de solicitarnos la ubicación del archivo, nos pide especificar el delimitador que se usó para almacenar los datos.Por ejemplo, inspeccionemos el archivo “gapminder_comas2.txt”Vemos que es muy similar los archivos anteriores, pero en este caso las columnas están separadas por punto y coma.Para leer este archivo, hacemos uso de read_delim() indicando como separador el caracter adecuado.","code":"\ndatos_obtenidos_punto_y_coma <- read_delim(\"data/gapminder_comas2.txt\", delim = \";\")\n#> Rows: 1704 Columns: 6\n#> -- Column specification ------------------------------------\n#> Delimiter: \";\"\n#> chr (2): country, continent\n#> dbl (4): year, lifeExp, pop, gdpPercap\n#> \n#> i Use `spec()` to retrieve the full column specification for this data.\n#> i Specify the column types or set `show_col_types = FALSE` to quiet this message."},{"path":"importación-de-datos.html","id":"importación-de-archivos-excel","chapter":"Capítulo 5 Importación de datos","heading":"5.3 Importación de archivos excel","text":"Para poder leer datos de excel, vamos hacer uso del paquete readxl.Recuerda que para cargar cualquier paquete, especificas su nombre sin comillas dentro de un llamado la funcion library().La función que nos permite leer archivos .xlsx es read_xlsx(). La usamos igual que en los casos anteriores.Alternativamente, podemos usar la función read_excel(), que nos da el mismo resultado.","code":"\nlibrary(readxl)\ngapminder_excel <- read_xlsx(\"data/gapminder_excel.xlsx\")\ngapminder_excel\n#> # A tibble: 1,704 x 6\n#>    country     continent  year lifeExp      pop gdpPercap\n#>    <chr>       <chr>     <dbl>   <dbl>    <dbl>     <dbl>\n#>  1 Afghanistan Asia       1952    28.8  8425333      779.\n#>  2 Afghanistan Asia       1957    30.3  9240934      821.\n#>  3 Afghanistan Asia       1962    32.0 10267083      853.\n#>  4 Afghanistan Asia       1967    34.0 11537966      836.\n#>  5 Afghanistan Asia       1972    36.1 13079460      740.\n#>  6 Afghanistan Asia       1977    38.4 14880372      786.\n#>  7 Afghanistan Asia       1982    39.9 12881816      978.\n#>  8 Afghanistan Asia       1987    40.8 13867957      852.\n#>  9 Afghanistan Asia       1992    41.7 16317921      649.\n#> 10 Afghanistan Asia       1997    41.8 22227415      635.\n#> # ... with 1,694 more rows\ngapminder_excel2 <- read_excel(\"data/gapminder_excel.xlsx\")\ngapminder_excel2\n#> # A tibble: 1,704 x 6\n#>    country     continent  year lifeExp      pop gdpPercap\n#>    <chr>       <chr>     <dbl>   <dbl>    <dbl>     <dbl>\n#>  1 Afghanistan Asia       1952    28.8  8425333      779.\n#>  2 Afghanistan Asia       1957    30.3  9240934      821.\n#>  3 Afghanistan Asia       1962    32.0 10267083      853.\n#>  4 Afghanistan Asia       1967    34.0 11537966      836.\n#>  5 Afghanistan Asia       1972    36.1 13079460      740.\n#>  6 Afghanistan Asia       1977    38.4 14880372      786.\n#>  7 Afghanistan Asia       1982    39.9 12881816      978.\n#>  8 Afghanistan Asia       1987    40.8 13867957      852.\n#>  9 Afghanistan Asia       1992    41.7 16317921      649.\n#> 10 Afghanistan Asia       1997    41.8 22227415      635.\n#> # ... with 1,694 more rows"},{"path":"importación-de-datos.html","id":"importación-de-archivos-spss","chapter":"Capítulo 5 Importación de datos","heading":"5.4 Importación de archivos SPSS","text":"Para leer archivos SPSS cargamos el paquete haven.Como la extensión de los archivos es .sav podemos leerlos con la función read_sav().Alternativamente, podemos usar la función read_spss(), que nos da el mismo resultado.","code":"\nlibrary(haven)\nuniversidades <- read_sav(\"data/09_UNIVERSIDADES_CARATULA.SAV\")\nuniversidades\n#> # A tibble: 122 x 8\n#>    SELECT UC0DD_CD UC0DD_DPTO UC0PP_CD UC0PP_PROV UC0DI_CD\n#>    <chr>  <chr>    <chr>      <chr>    <chr>      <chr>   \n#>  1 U0001  16       LORETO     01       MAYNAS     13      \n#>  2 U0002  14       LAMBAYEQUE 03       LAMBAYEQUE 01      \n#>  3 U0003  15       LIMA       01       LIMA       40      \n#>  4 U0004  15       LIMA       01       LIMA       13      \n#>  5 U0005  15       LIMA       01       LIMA       35      \n#>  6 U0006  15       LIMA       01       LIMA       40      \n#>  7 U0007  15       LIMA       01       LIMA       21      \n#>  8 U0008  23       TACNA      01       TACNA      01      \n#>  9 U0009  10       HUANUCO    01       HUANUCO    01      \n#> 10 U0010  15       LIMA       01       LIMA       13      \n#> # ... with 112 more rows, and 2 more variables:\n#> #   UC0DI_DIST <chr>, UC0P_OBS <chr>\nuniversidades2 <- read_spss(\"data/09_UNIVERSIDADES_CARATULA.SAV\")\nuniversidades2\n#> # A tibble: 122 x 8\n#>    SELECT UC0DD_CD UC0DD_DPTO UC0PP_CD UC0PP_PROV UC0DI_CD\n#>    <chr>  <chr>    <chr>      <chr>    <chr>      <chr>   \n#>  1 U0001  16       LORETO     01       MAYNAS     13      \n#>  2 U0002  14       LAMBAYEQUE 03       LAMBAYEQUE 01      \n#>  3 U0003  15       LIMA       01       LIMA       40      \n#>  4 U0004  15       LIMA       01       LIMA       13      \n#>  5 U0005  15       LIMA       01       LIMA       35      \n#>  6 U0006  15       LIMA       01       LIMA       40      \n#>  7 U0007  15       LIMA       01       LIMA       21      \n#>  8 U0008  23       TACNA      01       TACNA      01      \n#>  9 U0009  10       HUANUCO    01       HUANUCO    01      \n#> 10 U0010  15       LIMA       01       LIMA       13      \n#> # ... with 112 more rows, and 2 more variables:\n#> #   UC0DI_DIST <chr>, UC0P_OBS <chr>"},{"path":"importación-de-datos.html","id":"lectura-de-datos-con-más-argumentos","chapter":"Capítulo 5 Importación de datos","heading":"5.5 Lectura de datos con más argumentos","text":"siempre los datos estarán de antemano en un formato que nos permita leerlos automáticamente. En algunos casos, será necesario especificar argumentos adicionales al momento de leerlos.Intentar leer los datos de los archivos excel restantes.","code":""},{"path":"importación-de-datos.html","id":"solución","chapter":"Capítulo 5 Importación de datos","heading":"5.6 Solución","text":"Usar los argumentos adicionales:skipsheetcol_names","code":""},{"path":"importación-de-datos.html","id":"uso-de-datos-de-paquetes-instalados","chapter":"Capítulo 5 Importación de datos","heading":"5.7 Uso de datos de paquetes instalados","text":"","code":""},{"path":"importación-de-datos.html","id":"revisar-datos-disponibles","chapter":"Capítulo 5 Importación de datos","heading":"5.7.1 Revisar datos disponibles","text":"Cuando se carga un paquete, el usuario tiene acceso los set de datos contenidos en él. Podemos obtener un listado de los set de datos contenidos en un paquete usando la función datasets() del paquete vcdExtra. Si lo tenemos instalado debemos usar el siguiente código en la consola.Para usar sus funciones usamos:Por ejemplo, para conocer los conjuntos de datos del paquete ggplot2:Si ya hemos cargado el paquete, basta con llamar al conjunto de datos usando su nombre.","code":"\ninstall.packages(\"vcdExtra\")\nlibrary(vcdExtra)\ndatasets(\"ggplot2\")\n#>              Item      class      dim\n#> 1        diamonds data.frame 53940x10\n#> 2       economics data.frame    574x6\n#> 3  economics_long data.frame   2870x4\n#> 4       faithfuld data.frame   5625x3\n#> 5     luv_colours data.frame    657x4\n#> 6         midwest data.frame   437x28\n#> 7             mpg data.frame   234x11\n#> 8          msleep data.frame    83x11\n#> 9    presidential data.frame     11x4\n#> 10          seals data.frame   1155x4\n#> 11      txhousing data.frame   8602x9\n#>                                                                Title\n#> 1                           Prices of over 50,000 round cut diamonds\n#> 2                                            US economic time series\n#> 3                                            US economic time series\n#> 4                           2d density estimate of Old Faithful data\n#> 5                                            'colors()' in Luv space\n#> 6                                               Midwest demographics\n#> 7  Fuel economy data from 1999 to 2008 for 38 popular models of cars\n#> 8       An updated and expanded version of the mammals sleep dataset\n#> 9                    Terms of 11 presidents from Eisenhower to Obama\n#> 10                                    Vector field of seal movements\n#> 11                                               Housing sales in TX\nlibrary(ggplot2)\ndiamonds\n#> # A tibble: 53,940 x 10\n#>    carat cut     color clarity depth table price     x     y\n#>    <dbl> <ord>   <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl>\n#>  1  0.23 Ideal   E     SI2      61.5    55   326  3.95  3.98\n#>  2  0.21 Premium E     SI1      59.8    61   326  3.89  3.84\n#>  3  0.23 Good    E     VS1      56.9    65   327  4.05  4.07\n#>  4  0.29 Premium I     VS2      62.4    58   334  4.2   4.23\n#>  5  0.31 Good    J     SI2      63.3    58   335  4.34  4.35\n#>  6  0.24 Very G~ J     VVS2     62.8    57   336  3.94  3.96\n#>  7  0.24 Very G~ I     VVS1     62.3    57   336  3.95  3.98\n#>  8  0.26 Very G~ H     SI1      61.9    55   337  4.07  4.11\n#>  9  0.22 Fair    E     VS2      65.1    61   337  3.87  3.78\n#> 10  0.23 Very G~ H     VS1      59.4    61   338  4     4.05\n#> # ... with 53,930 more rows, and 1 more variable: z <dbl>\neconomics\n#> # A tibble: 574 x 6\n#>    date         pce    pop psavert uempmed unemploy\n#>    <date>     <dbl>  <dbl>   <dbl>   <dbl>    <dbl>\n#>  1 1967-07-01  507. 198712    12.6     4.5     2944\n#>  2 1967-08-01  510. 198911    12.6     4.7     2945\n#>  3 1967-09-01  516. 199113    11.9     4.6     2958\n#>  4 1967-10-01  512. 199311    12.9     4.9     3143\n#>  5 1967-11-01  517. 199498    12.8     4.7     3066\n#>  6 1967-12-01  525. 199657    11.8     4.8     3018\n#>  7 1968-01-01  531. 199808    11.7     5.1     2878\n#>  8 1968-02-01  534. 199920    12.3     4.5     3001\n#>  9 1968-03-01  544. 200056    11.7     4.1     2877\n#> 10 1968-04-01  544  200208    12.3     4.6     2709\n#> # ... with 564 more rows\nseals\n#> # A tibble: 1,155 x 4\n#>      lat  long delta_long delta_lat\n#>    <dbl> <dbl>      <dbl>     <dbl>\n#>  1  29.7 -173.     -0.915   0.143  \n#>  2  30.7 -173.     -0.867   0.128  \n#>  3  31.7 -173.     -0.819   0.113  \n#>  4  32.7 -173.     -0.771   0.0980 \n#>  5  33.7 -173.     -0.723   0.0828 \n#>  6  34.7 -173.     -0.674   0.0675 \n#>  7  35.7 -173.     -0.626   0.0522 \n#>  8  36.7 -173.     -0.577   0.0369 \n#>  9  37.7 -173.     -0.529   0.0216 \n#> 10  38.7 -173.     -0.480   0.00635\n#> # ... with 1,145 more rows"},{"path":"importación-de-datos.html","id":"material-extra","chapter":"Capítulo 5 Importación de datos","heading":"5.8 Material extra","text":"Para aprender más, puedes consultar:R para ciencia de datos. Capítulo Importación de datosImporting data RStudio blogDifferent ways importing data R blog","code":""},{"path":"transformación.html","id":"transformación","chapter":"Capítulo 6 Transformación","heading":"Capítulo 6 Transformación","text":"","code":""},{"path":"transformación.html","id":"tibbles","chapter":"Capítulo 6 Transformación","heading":"6.1 Tibbles","text":"Hasta el momento hemos trabajado usando tablas que hemos leído desde un paquete descargado o que hemos importado desde un archivo local.Por ejemplo, gapminder.Cuando lo leemos, obtenemos un tibble.Un tibble es una tipo especial de tabla. R muestra un tibble en una manera sencilla: Se mostrarán solo las 10 primeras filas del tibble, así como todas las columnas que quepan en tu ventana de consola o documento R Markdown. R también agrega información útil acerca del tibble, como los tipos de datos de cada columna y el tamaño del conjunto de datos.Los tibbles son una versión mejorada de los data.frames, la forma en que R trabaja con datos tabulares.Los tibble son objetos ampliamente utilizados en la actualidad y son parte fundamental del tidyverse, un conjunto de paquetes que comparten una filosofía en común, con el fin de hacer el análisis de datos más accesible y reproducible.Esta filosofía es visiblemente respaldada por los desarrolladores de RStudio. Debido esta popularidad , es bastante probable que cuando veas que alguien está hablando de un data.frame, en realidad se esté refiriendo un tibble.","code":"\nlibrary(gapminder)\n\ngapminder\n#> # A tibble: 1,704 x 6\n#>    country     continent  year lifeExp      pop gdpPercap\n#>    <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n#>  1 Afghanistan Asia       1952    28.8  8425333      779.\n#>  2 Afghanistan Asia       1957    30.3  9240934      821.\n#>  3 Afghanistan Asia       1962    32.0 10267083      853.\n#>  4 Afghanistan Asia       1967    34.0 11537966      836.\n#>  5 Afghanistan Asia       1972    36.1 13079460      740.\n#>  6 Afghanistan Asia       1977    38.4 14880372      786.\n#>  7 Afghanistan Asia       1982    39.9 12881816      978.\n#>  8 Afghanistan Asia       1987    40.8 13867957      852.\n#>  9 Afghanistan Asia       1992    41.7 16317921      649.\n#> 10 Afghanistan Asia       1997    41.8 22227415      635.\n#> # ... with 1,694 more rows\nlibrary(tidyverse) # carga el paquete tibble"},{"path":"transformación.html","id":"visualizar-datos","chapter":"Capítulo 6 Transformación","heading":"6.2 Visualizar datos","text":"Es posible acceder una ventana de visualización de tablas en el panel de Edición si usamos la función View() en nuestra sesión de RStudio. Es el mismo panel que aparece cuando hacemos click en el nombre de una tabla en el Environment.","code":"\nView(gapminder)"},{"path":"transformación.html","id":"el-paquete-dplyr","chapter":"Capítulo 6 Transformación","heading":"6.3 El paquete dplyr","text":"El paquete dplyr nos permite transformar nuestros datos tabulares. Una ventaja de este paquete es que sus funciones utilizan verbos para representar las acciones que queremos realizar en el contexto de nuestro análisis de datos. Por ejemplo:Seleccionar variables por su nombre con select().Filtrar observaciones de acuerdo sus valores con filter().Organizar las filas de acuerdo sus valores con arrange().Modificar las variables de nuestro conjunto de datos con mutate().Resumir nuestros datos en valores representativos con summarise().Agrupar nuestros datos para operar en ellos con group_by().Otra característica de las funciones verbo de dplyr es que su primer argumento será siempre el tibble que queremos transformar. Más adelante, esto permitirá encadenar las funciones con el operador pipe.Todas las operaciones descritas anteriormente pueden hacerse con funciones de R base, sin embargo con una interfaz consistente entre funciones y paquetes.Para poder usar sus funciones, debemos cargar el paquete. Como forma parte de los paquetes del tidyverse, podemos cargar todos juntos la vez.","code":"\n# Para cargar sólo dplyr\nlibrary(dplyr)\n#> \n#> Attaching package: 'dplyr'\n#> The following objects are masked from 'package:stats':\n#> \n#>     filter, lag\n#> The following objects are masked from 'package:base':\n#> \n#>     intersect, setdiff, setequal, union\n# Para cargar todo el tidyverse\nlibrary(tidyverse)\n#> -- Attaching packages ------------------- tidyverse 1.3.1 --\n#> v ggplot2 3.3.5     v purrr   0.3.4\n#> v tibble  3.1.4     v dplyr   1.0.7\n#> v tidyr   1.1.4     v stringr 1.4.0\n#> v readr   2.0.2     v forcats 0.5.1\n#> -- Conflicts ---------------------- tidyverse_conflicts() --\n#> x dplyr::filter() masks stats::filter()\n#> x dplyr::lag()    masks stats::lag()"},{"path":"transformación.html","id":"transformación-de-columnas","chapter":"Capítulo 6 Transformación","heading":"6.4 Transformación de columnas","text":"","code":""},{"path":"transformación.html","id":"cambiar-nombre-de-una-columna","chapter":"Capítulo 6 Transformación","heading":"6.4.1 Cambiar nombre de una columna","text":"Usar rename().Esta función nos permite cambiar el nombre de nuestras columnas. Debemos especificar:El nombre del conjunto de datosEl cambio de nombre, usando la sintaxis nuevo_nombre = nombre_anterior","code":"\ngapminder %>% \n    rename(pais = country)\n#> # A tibble: 1,704 x 6\n#>    pais        continent  year lifeExp      pop gdpPercap\n#>    <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n#>  1 Afghanistan Asia       1952    28.8  8425333      779.\n#>  2 Afghanistan Asia       1957    30.3  9240934      821.\n#>  3 Afghanistan Asia       1962    32.0 10267083      853.\n#>  4 Afghanistan Asia       1967    34.0 11537966      836.\n#>  5 Afghanistan Asia       1972    36.1 13079460      740.\n#>  6 Afghanistan Asia       1977    38.4 14880372      786.\n#>  7 Afghanistan Asia       1982    39.9 12881816      978.\n#>  8 Afghanistan Asia       1987    40.8 13867957      852.\n#>  9 Afghanistan Asia       1992    41.7 16317921      649.\n#> 10 Afghanistan Asia       1997    41.8 22227415      635.\n#> # ... with 1,694 more rows"},{"path":"transformación.html","id":"cambiar-nombre-de-varias-columnas","chapter":"Capítulo 6 Transformación","heading":"6.4.2 Cambiar nombre de varias columnas","text":"Es posible cambiar más de un nombre la vez.","code":"\ngapminder %>% \n    rename(pais = country,\n           continente = continent, \n           anio = year,\n           exp_de_vida = lifeExp,\n           poblacion = pop,\n           pbi_per_cap = gdpPercap)\n#> # A tibble: 1,704 x 6\n#>    pais        continente  anio exp_de_vida poblacion pbi_per_cap\n#>    <fct>       <fct>      <int>       <dbl>     <int>       <dbl>\n#>  1 Afghanistan Asia        1952        28.8   8425333        779.\n#>  2 Afghanistan Asia        1957        30.3   9240934        821.\n#>  3 Afghanistan Asia        1962        32.0  10267083        853.\n#>  4 Afghanistan Asia        1967        34.0  11537966        836.\n#>  5 Afghanistan Asia        1972        36.1  13079460        740.\n#>  6 Afghanistan Asia        1977        38.4  14880372        786.\n#>  7 Afghanistan Asia        1982        39.9  12881816        978.\n#>  8 Afghanistan Asia        1987        40.8  13867957        852.\n#>  9 Afghanistan Asia        1992        41.7  16317921        649.\n#> 10 Afghanistan Asia        1997        41.8  22227415        635.\n#> # ... with 1,694 more rows"},{"path":"transformación.html","id":"cambiar-posición-de-una-columna","chapter":"Capítulo 6 Transformación","heading":"6.4.3 Cambiar posición de una columna","text":"Usar relocate().Esta función permite cambiar la ubicación de nuestras columnas. Debemos especificar:El nombre del conjunto de datosLos nombres de columna que queremos reubicarPor defecto, pondrá las columnas especificadas como primera columna.Es posible especificar una posición en especial con los argumentos .(antes) o .(después).","code":"\ngapminder %>% \n    relocate(gdpPercap)\n#> # A tibble: 1,704 x 6\n#>    gdpPercap country     continent  year lifeExp      pop\n#>        <dbl> <fct>       <fct>     <int>   <dbl>    <int>\n#>  1      779. Afghanistan Asia       1952    28.8  8425333\n#>  2      821. Afghanistan Asia       1957    30.3  9240934\n#>  3      853. Afghanistan Asia       1962    32.0 10267083\n#>  4      836. Afghanistan Asia       1967    34.0 11537966\n#>  5      740. Afghanistan Asia       1972    36.1 13079460\n#>  6      786. Afghanistan Asia       1977    38.4 14880372\n#>  7      978. Afghanistan Asia       1982    39.9 12881816\n#>  8      852. Afghanistan Asia       1987    40.8 13867957\n#>  9      649. Afghanistan Asia       1992    41.7 16317921\n#> 10      635. Afghanistan Asia       1997    41.8 22227415\n#> # ... with 1,694 more rows\ngapminder %>% \n    relocate(gdpPercap, .before = year)\n#> # A tibble: 1,704 x 6\n#>    country     continent gdpPercap  year lifeExp      pop\n#>    <fct>       <fct>         <dbl> <int>   <dbl>    <int>\n#>  1 Afghanistan Asia           779.  1952    28.8  8425333\n#>  2 Afghanistan Asia           821.  1957    30.3  9240934\n#>  3 Afghanistan Asia           853.  1962    32.0 10267083\n#>  4 Afghanistan Asia           836.  1967    34.0 11537966\n#>  5 Afghanistan Asia           740.  1972    36.1 13079460\n#>  6 Afghanistan Asia           786.  1977    38.4 14880372\n#>  7 Afghanistan Asia           978.  1982    39.9 12881816\n#>  8 Afghanistan Asia           852.  1987    40.8 13867957\n#>  9 Afghanistan Asia           649.  1992    41.7 16317921\n#> 10 Afghanistan Asia           635.  1997    41.8 22227415\n#> # ... with 1,694 more rows\ngapminder %>% \n    relocate(gdpPercap, .after = year)\n#> # A tibble: 1,704 x 6\n#>    country     continent  year gdpPercap lifeExp      pop\n#>    <fct>       <fct>     <int>     <dbl>   <dbl>    <int>\n#>  1 Afghanistan Asia       1952      779.    28.8  8425333\n#>  2 Afghanistan Asia       1957      821.    30.3  9240934\n#>  3 Afghanistan Asia       1962      853.    32.0 10267083\n#>  4 Afghanistan Asia       1967      836.    34.0 11537966\n#>  5 Afghanistan Asia       1972      740.    36.1 13079460\n#>  6 Afghanistan Asia       1977      786.    38.4 14880372\n#>  7 Afghanistan Asia       1982      978.    39.9 12881816\n#>  8 Afghanistan Asia       1987      852.    40.8 13867957\n#>  9 Afghanistan Asia       1992      649.    41.7 16317921\n#> 10 Afghanistan Asia       1997      635.    41.8 22227415\n#> # ... with 1,694 more rows"},{"path":"transformación.html","id":"seleccionar-columnas","chapter":"Capítulo 6 Transformación","heading":"6.4.4 Seleccionar columnas","text":"La función select() nos permite seleccionar columnas específicas de nuestro tibble Supongamos que sólo queremos los nombres de los países, el año y el total de población. Podemos hacerlo con select().Debemos especificar:El nombre del conjunto de datosLas variables escogerLas columnas escogidas aparecen en el orden especificado.También es posible escoger columnas usando su posición en el conjunto de datos con números.Sin embargo, recomiendo usar esta manera de selección porque el código es más dificil de interpretar.","code":"\ngapminder %>% \n    select(country, year, pop)\n#> # A tibble: 1,704 x 3\n#>    country      year      pop\n#>    <fct>       <int>    <int>\n#>  1 Afghanistan  1952  8425333\n#>  2 Afghanistan  1957  9240934\n#>  3 Afghanistan  1962 10267083\n#>  4 Afghanistan  1967 11537966\n#>  5 Afghanistan  1972 13079460\n#>  6 Afghanistan  1977 14880372\n#>  7 Afghanistan  1982 12881816\n#>  8 Afghanistan  1987 13867957\n#>  9 Afghanistan  1992 16317921\n#> 10 Afghanistan  1997 22227415\n#> # ... with 1,694 more rows\ngapminder %>% \n    select(1, 3, 5)\n#> # A tibble: 1,704 x 3\n#>    country      year      pop\n#>    <fct>       <int>    <int>\n#>  1 Afghanistan  1952  8425333\n#>  2 Afghanistan  1957  9240934\n#>  3 Afghanistan  1962 10267083\n#>  4 Afghanistan  1967 11537966\n#>  5 Afghanistan  1972 13079460\n#>  6 Afghanistan  1977 14880372\n#>  7 Afghanistan  1982 12881816\n#>  8 Afghanistan  1987 13867957\n#>  9 Afghanistan  1992 16317921\n#> 10 Afghanistan  1997 22227415\n#> # ... with 1,694 more rows"},{"path":"transformación.html","id":"remover-columnas","chapter":"Capítulo 6 Transformación","heading":"6.4.5 Remover columnas","text":"Anteponerle el signo negativo al nombre de la columna en select(). En este ejemplo queremos dejar fuera la columna pop y lifeExp.","code":"\ngapminder %>% \n    select(-pop, -lifeExp)\n#> # A tibble: 1,704 x 4\n#>    country     continent  year gdpPercap\n#>    <fct>       <fct>     <int>     <dbl>\n#>  1 Afghanistan Asia       1952      779.\n#>  2 Afghanistan Asia       1957      821.\n#>  3 Afghanistan Asia       1962      853.\n#>  4 Afghanistan Asia       1967      836.\n#>  5 Afghanistan Asia       1972      740.\n#>  6 Afghanistan Asia       1977      786.\n#>  7 Afghanistan Asia       1982      978.\n#>  8 Afghanistan Asia       1987      852.\n#>  9 Afghanistan Asia       1992      649.\n#> 10 Afghanistan Asia       1997      635.\n#> # ... with 1,694 more rows"},{"path":"transformación.html","id":"cambiar-nombres-en-selección","chapter":"Capítulo 6 Transformación","heading":"6.4.6 Cambiar nombres en selección","text":"Usando select() con una sintaxis como la de rename() para cambiar el nombre de las columnas al mismo tiempo que seleccionarlas.El código anterior es equivalente combinar ambas operaciones.","code":"\ngapminder %>% \n    select(pais = country, \n           anio = year,\n           poblacion = pop)\n#> # A tibble: 1,704 x 3\n#>    pais         anio poblacion\n#>    <fct>       <int>     <int>\n#>  1 Afghanistan  1952   8425333\n#>  2 Afghanistan  1957   9240934\n#>  3 Afghanistan  1962  10267083\n#>  4 Afghanistan  1967  11537966\n#>  5 Afghanistan  1972  13079460\n#>  6 Afghanistan  1977  14880372\n#>  7 Afghanistan  1982  12881816\n#>  8 Afghanistan  1987  13867957\n#>  9 Afghanistan  1992  16317921\n#> 10 Afghanistan  1997  22227415\n#> # ... with 1,694 more rows\ngapminder %>% \n    select(country, year, pop) %>% \n    rename(pais = country,\n           anio = year,\n           poblacion = pop)\n#> # A tibble: 1,704 x 3\n#>    pais         anio poblacion\n#>    <fct>       <int>     <int>\n#>  1 Afghanistan  1952   8425333\n#>  2 Afghanistan  1957   9240934\n#>  3 Afghanistan  1962  10267083\n#>  4 Afghanistan  1967  11537966\n#>  5 Afghanistan  1972  13079460\n#>  6 Afghanistan  1977  14880372\n#>  7 Afghanistan  1982  12881816\n#>  8 Afghanistan  1987  13867957\n#>  9 Afghanistan  1992  16317921\n#> 10 Afghanistan  1997  22227415\n#> # ... with 1,694 more rows"},{"path":"transformación.html","id":"opciones-avanzadas-de-selección","chapter":"Capítulo 6 Transformación","heading":"6.4.7 Opciones avanzadas de selección","text":"La función select() puede hacer uso de funciones de apoyo del paquete tidyselect(), que se cargan automáticamente junto con dplyr.Para ejemplificar, usaremos el conjunto de datos flights del paquete nycflights13.","code":"\nlibrary(nycflights13)\n\nflights\n#> # A tibble: 336,776 x 19\n#>     year month   day dep_time sched_dep_time dep_delay\n#>    <int> <int> <int>    <int>          <int>     <dbl>\n#>  1  2013     1     1      517            515         2\n#>  2  2013     1     1      533            529         4\n#>  3  2013     1     1      542            540         2\n#>  4  2013     1     1      544            545        -1\n#>  5  2013     1     1      554            600        -6\n#>  6  2013     1     1      554            558        -4\n#>  7  2013     1     1      555            600        -5\n#>  8  2013     1     1      557            600        -3\n#>  9  2013     1     1      557            600        -3\n#> 10  2013     1     1      558            600        -2\n#> # ... with 336,766 more rows, and 13 more variables:\n#> #   arr_time <int>, sched_arr_time <int>, arr_delay <dbl>,\n#> #   carrier <chr>, flight <int>, tailnum <chr>,\n#> #   origin <chr>, dest <chr>, air_time <dbl>,\n#> #   distance <dbl>, hour <dbl>, minute <dbl>,\n#> #   time_hour <dttm>"},{"path":"transformación.html","id":"seleccionar-columnas-en-secuencia","chapter":"Capítulo 6 Transformación","heading":"6.4.7.1 Seleccionar columnas en secuencia","text":"Es posible seleccionar una secuencia de variables consecutivas si usamos el operador de secuencia (:).","code":"\nflights %>% \n    select(dep_time:sched_arr_time)\n#> # A tibble: 336,776 x 5\n#>    dep_time sched_dep_time dep_delay arr_time sched_arr_time\n#>       <int>          <int>     <dbl>    <int>          <int>\n#>  1      517            515         2      830            819\n#>  2      533            529         4      850            830\n#>  3      542            540         2      923            850\n#>  4      544            545        -1     1004           1022\n#>  5      554            600        -6      812            837\n#>  6      554            558        -4      740            728\n#>  7      555            600        -5      913            854\n#>  8      557            600        -3      709            723\n#>  9      557            600        -3      838            846\n#> 10      558            600        -2      753            745\n#> # ... with 336,766 more rows"},{"path":"transformación.html","id":"seleccionar-columnas-según-un-patrón","chapter":"Capítulo 6 Transformación","heading":"6.4.7.2 Seleccionar columnas según un patrón","text":"Es posible usar funciones que nos permiten hacer match de los nombres de nuestras columnas con caracteres de texto:starts_with(): El nombre empieza con un prefijo determinadoends_with(): El nombre termina con un sufijo determinadocontains(): El nombre contiene una cadena de textomatches(): El nombre hace match con una expresión regular (avanzado)Los patrones de texto deben especificarse entre comillas (\").","code":"\nflights %>% \n    select(starts_with(\"dep\"))\n#> # A tibble: 336,776 x 2\n#>    dep_time dep_delay\n#>       <int>     <dbl>\n#>  1      517         2\n#>  2      533         4\n#>  3      542         2\n#>  4      544        -1\n#>  5      554        -6\n#>  6      554        -4\n#>  7      555        -5\n#>  8      557        -3\n#>  9      557        -3\n#> 10      558        -2\n#> # ... with 336,766 more rows\nflights %>% \n    select(ends_with(\"delay\"))\n#> # A tibble: 336,776 x 2\n#>    dep_delay arr_delay\n#>        <dbl>     <dbl>\n#>  1         2        11\n#>  2         4        20\n#>  3         2        33\n#>  4        -1       -18\n#>  5        -6       -25\n#>  6        -4        12\n#>  7        -5        19\n#>  8        -3       -14\n#>  9        -3        -8\n#> 10        -2         8\n#> # ... with 336,766 more rows\nflights %>% \n    select(contains(\"time\"))\n#> # A tibble: 336,776 x 6\n#>    dep_time sched_dep_time arr_time sched_arr_time air_time\n#>       <int>          <int>    <int>          <int>    <dbl>\n#>  1      517            515      830            819      227\n#>  2      533            529      850            830      227\n#>  3      542            540      923            850      160\n#>  4      544            545     1004           1022      183\n#>  5      554            600      812            837      116\n#>  6      554            558      740            728      150\n#>  7      555            600      913            854      158\n#>  8      557            600      709            723       53\n#>  9      557            600      838            846      140\n#> 10      558            600      753            745      138\n#> # ... with 336,766 more rows, and 1 more variable:\n#> #   time_hour <dttm>\nflights %>% \n    select(matches(\"a(i|r)r_time\"))\n#> # A tibble: 336,776 x 3\n#>    arr_time sched_arr_time air_time\n#>       <int>          <int>    <dbl>\n#>  1      830            819      227\n#>  2      850            830      227\n#>  3      923            850      160\n#>  4     1004           1022      183\n#>  5      812            837      116\n#>  6      740            728      150\n#>  7      913            854      158\n#>  8      709            723       53\n#>  9      838            846      140\n#> 10      753            745      138\n#> # ... with 336,766 more rows"},{"path":"transformación.html","id":"seleccionar-avanzado-simultáneo","chapter":"Capítulo 6 Transformación","heading":"6.4.7.3 Seleccionar avanzado simultáneo","text":"Es posible combinar todas las formas de selección dentro de una sola llamada select().","code":"\nflights %>% \n    select(year:day, starts_with(\"arr\"))\n#> # A tibble: 336,776 x 5\n#>     year month   day arr_time arr_delay\n#>    <int> <int> <int>    <int>     <dbl>\n#>  1  2013     1     1      830        11\n#>  2  2013     1     1      850        20\n#>  3  2013     1     1      923        33\n#>  4  2013     1     1     1004       -18\n#>  5  2013     1     1      812       -25\n#>  6  2013     1     1      740        12\n#>  7  2013     1     1      913        19\n#>  8  2013     1     1      709       -14\n#>  9  2013     1     1      838        -8\n#> 10  2013     1     1      753         8\n#> # ... with 336,766 more rows"},{"path":"transformación.html","id":"transformación-filas","chapter":"Capítulo 6 Transformación","heading":"6.5 Transformación filas","text":"","code":""},{"path":"transformación.html","id":"obtener-un-subconjunto-de-datos","chapter":"Capítulo 6 Transformación","heading":"6.5.1 Obtener un subconjunto de datos","text":"La función filter() nos simplifica la tarea de hacer subsetting (escoger un subconjunto de nuestros datos). Debemos especificar dos elementos:El nombre del conjunto de datosLa condición que tiene cumplir una observación para permanecer.Para establecer las condiciones, debemos usar operaciones lógicas. Del mismo modo que los operadores aritméticos nos permiten obtener un resultado aritmético (aka, numérico) en nuestros cálculos, existen otros operadores que nos permiten obtener resultados lógicos.En esta sección, usaremos gapminder como ejemplo.","code":""},{"path":"transformación.html","id":"operadores-relacionales","chapter":"Capítulo 6 Transformación","heading":"6.5.1.1 Operadores relacionales","text":"Los primeros de ellos son los relacionales, y ya los conocemos desde el colegio, pero es bueno saber cómo escribirlos en R. La siguiente tabla nos muestra para qué sirve cada uno de ellos.","code":""},{"path":"transformación.html","id":"subsetting-basado-en-un-solo-valor","chapter":"Capítulo 6 Transformación","heading":"6.5.1.2 Subsetting basado en un solo valor","text":"De entre todas las observaciones, podemos escoger aquellas cuyo país sea “Perú.” Para ello, usamos la operación country == \"Peru\".También podemos hacer comparaciones basadas en números. Por ejemplo, todas las observaciones correspondientes al año 2007.Podemos escoger sólo aquellas observaciones que cuya población sea mayor mil millones.Podemos escoger las observaciones cuya expectativa de vida sea menor 30 años.","code":"\ngapminder %>% \n    filter(country == \"Peru\")\n#> # A tibble: 12 x 6\n#>    country continent  year lifeExp      pop gdpPercap\n#>    <fct>   <fct>     <int>   <dbl>    <int>     <dbl>\n#>  1 Peru    Americas   1952    43.9  8025700     3759.\n#>  2 Peru    Americas   1957    46.3  9146100     4245.\n#>  3 Peru    Americas   1962    49.1 10516500     4957.\n#>  4 Peru    Americas   1967    51.4 12132200     5788.\n#>  5 Peru    Americas   1972    55.4 13954700     5938.\n#>  6 Peru    Americas   1977    58.4 15990099     6281.\n#>  7 Peru    Americas   1982    61.4 18125129     6435.\n#>  8 Peru    Americas   1987    64.1 20195924     6361.\n#>  9 Peru    Americas   1992    66.5 22430449     4446.\n#> 10 Peru    Americas   1997    68.4 24748122     5838.\n#> 11 Peru    Americas   2002    69.9 26769436     5909.\n#> 12 Peru    Americas   2007    71.4 28674757     7409.\ngapminder %>% \n    filter(year == 2007)\n#> # A tibble: 142 x 6\n#>    country     continent  year lifeExp       pop gdpPercap\n#>    <fct>       <fct>     <int>   <dbl>     <int>     <dbl>\n#>  1 Afghanistan Asia       2007    43.8  31889923      975.\n#>  2 Albania     Europe     2007    76.4   3600523     5937.\n#>  3 Algeria     Africa     2007    72.3  33333216     6223.\n#>  4 Angola      Africa     2007    42.7  12420476     4797.\n#>  5 Argentina   Americas   2007    75.3  40301927    12779.\n#>  6 Australia   Oceania    2007    81.2  20434176    34435.\n#>  7 Austria     Europe     2007    79.8   8199783    36126.\n#>  8 Bahrain     Asia       2007    75.6    708573    29796.\n#>  9 Bangladesh  Asia       2007    64.1 150448339     1391.\n#> 10 Belgium     Europe     2007    79.4  10392226    33693.\n#> # ... with 132 more rows\ngapminder %>% \n    filter(pop > 1000000000)\n#> # A tibble: 8 x 6\n#>   country continent  year lifeExp        pop gdpPercap\n#>   <fct>   <fct>     <int>   <dbl>      <int>     <dbl>\n#> 1 China   Asia       1982    65.5 1000281000      962.\n#> 2 China   Asia       1987    67.3 1084035000     1379.\n#> 3 China   Asia       1992    68.7 1164970000     1656.\n#> 4 China   Asia       1997    70.4 1230075000     2289.\n#> 5 China   Asia       2002    72.0 1280400000     3119.\n#> 6 China   Asia       2007    73.0 1318683096     4959.\n#> 7 India   Asia       2002    62.9 1034172547     1747.\n#> 8 India   Asia       2007    64.7 1110396331     2452.\ngapminder %>% \n    filter(lifeExp < 30)\n#> # A tibble: 2 x 6\n#>   country     continent  year lifeExp     pop gdpPercap\n#>   <fct>       <fct>     <int>   <dbl>   <int>     <dbl>\n#> 1 Afghanistan Asia       1952    28.8 8425333      779.\n#> 2 Rwanda      Africa     1992    23.6 7290203      737."},{"path":"transformación.html","id":"subsetting-basado-en-múltiples-valores","chapter":"Capítulo 6 Transformación","heading":"6.5.1.3 Subsetting basado en múltiples valores","text":"Si usamos más de una condición, sólo permanecerán aquellas que cumplan con todas las expuestas. Por ejemplo, observaciones donde la población sea mayor mil millones y la expectativa de vida mayor 70 años.Países de América partir del 2002 cuyo PBI per cápita fue mayor $15000.","code":"\ngapminder %>% \n    filter(pop > 1000000000, lifeExp > 70)\n#> # A tibble: 3 x 6\n#>   country continent  year lifeExp        pop gdpPercap\n#>   <fct>   <fct>     <int>   <dbl>      <int>     <dbl>\n#> 1 China   Asia       1997    70.4 1230075000     2289.\n#> 2 China   Asia       2002    72.0 1280400000     3119.\n#> 3 China   Asia       2007    73.0 1318683096     4959.\ngapminder %>% \n    filter(continent == \"Americas\", year >= 2002, gdpPercap > 15000)\n#> # A tibble: 7 x 6\n#>   country             continent  year lifeExp    pop gdpPercap\n#>   <fct>               <fct>     <int>   <dbl>  <int>     <dbl>\n#> 1 Canada              Americas   2002    79.8 3.19e7    33329.\n#> 2 Canada              Americas   2007    80.7 3.34e7    36319.\n#> 3 Puerto Rico         Americas   2002    77.8 3.86e6    18856.\n#> 4 Puerto Rico         Americas   2007    78.7 3.94e6    19329.\n#> 5 Trinidad and Tobago Americas   2007    69.8 1.06e6    18009.\n#> 6 United States       Americas   2002    77.3 2.88e8    39097.\n#> 7 United States       Americas   2007    78.2 3.01e8    42952."},{"path":"transformación.html","id":"operadores-lógicos","chapter":"Capítulo 6 Transformación","heading":"6.5.1.4 Operadores lógicos","text":"Para potenciar nuestras habilidades de comparación, podemos hacer uso de operadores lógicos. La siguiente tabla te muestra cuáles son:Pueden usarse para obtener combinar comparaciones.","code":""},{"path":"transformación.html","id":"y-lógico","chapter":"Capítulo 6 Transformación","heading":"6.5.1.5 & (Y lógico)","text":"El Y lógico, en el contexto de filter() funciona de manera similar ir agregando nuevas condiciones. Permite que permanezcan observaciones que satisfagan todas las condiciones. Por ejemplo, para obtener observaciones donde la población sea mayor mil millones y la expectativa de vida mayor 70 años.","code":"\ngapminder %>% \n    filter(pop > 1000000000 & lifeExp > 70)\n#> # A tibble: 3 x 6\n#>   country continent  year lifeExp        pop gdpPercap\n#>   <fct>   <fct>     <int>   <dbl>      <int>     <dbl>\n#> 1 China   Asia       1997    70.4 1230075000     2289.\n#> 2 China   Asia       2002    72.0 1280400000     3119.\n#> 3 China   Asia       2007    73.0 1318683096     4959."},{"path":"transformación.html","id":"o-lógico","chapter":"Capítulo 6 Transformación","heading":"6.5.1.6 | (O lógico)","text":"El O lógico permite que permanezcan las observaciones que satisfagan al menos una de las condiciones indicadas. Por ejemplo, para obtener las observaciones correspondientes Perú o Colombia.Es posible ir agregando cuantos O lógicos sean necesarios para obtener todas las observaciones de un listado de países. Por ejemplo, los que pertenecen la Alianza del Pacífico.","code":"\ngapminder %>% \n    filter(country == \"Peru\" | country == \"Colombia\")\n#> # A tibble: 24 x 6\n#>    country  continent  year lifeExp      pop gdpPercap\n#>    <fct>    <fct>     <int>   <dbl>    <int>     <dbl>\n#>  1 Colombia Americas   1952    50.6 12350771     2144.\n#>  2 Colombia Americas   1957    55.1 14485993     2324.\n#>  3 Colombia Americas   1962    57.9 17009885     2492.\n#>  4 Colombia Americas   1967    60.0 19764027     2679.\n#>  5 Colombia Americas   1972    61.6 22542890     3265.\n#>  6 Colombia Americas   1977    63.8 25094412     3816.\n#>  7 Colombia Americas   1982    66.7 27764644     4398.\n#>  8 Colombia Americas   1987    67.8 30964245     4903.\n#>  9 Colombia Americas   1992    68.4 34202721     5445.\n#> 10 Colombia Americas   1997    70.3 37657830     6117.\n#> # ... with 14 more rows\ngapminder %>% \n    filter(country == \"Peru\" | country == \"Chile\"| country == \"Colombia\"| country == \"Mexico\")\n#> # A tibble: 48 x 6\n#>    country continent  year lifeExp      pop gdpPercap\n#>    <fct>   <fct>     <int>   <dbl>    <int>     <dbl>\n#>  1 Chile   Americas   1952    54.7  6377619     3940.\n#>  2 Chile   Americas   1957    56.1  7048426     4316.\n#>  3 Chile   Americas   1962    57.9  7961258     4519.\n#>  4 Chile   Americas   1967    60.5  8858908     5107.\n#>  5 Chile   Americas   1972    63.4  9717524     5494.\n#>  6 Chile   Americas   1977    67.1 10599793     4757.\n#>  7 Chile   Americas   1982    70.6 11487112     5096.\n#>  8 Chile   Americas   1987    72.5 12463354     5547.\n#>  9 Chile   Americas   1992    74.1 13572994     7596.\n#> 10 Chile   Americas   1997    75.8 14599929    10118.\n#> # ... with 38 more rows"},{"path":"transformación.html","id":"in","chapter":"Capítulo 6 Transformación","heading":"6.5.1.7 %in%","text":"R permite usar el operador %% para usar condiciones basadas en un O lógico de manera más sencilla.","code":"\ngapminder %>% \n    filter(country %in% c(\"Peru\", \"Chile\", \"Colombia\", \"Mexico\"))\n#> # A tibble: 48 x 6\n#>    country continent  year lifeExp      pop gdpPercap\n#>    <fct>   <fct>     <int>   <dbl>    <int>     <dbl>\n#>  1 Chile   Americas   1952    54.7  6377619     3940.\n#>  2 Chile   Americas   1957    56.1  7048426     4316.\n#>  3 Chile   Americas   1962    57.9  7961258     4519.\n#>  4 Chile   Americas   1967    60.5  8858908     5107.\n#>  5 Chile   Americas   1972    63.4  9717524     5494.\n#>  6 Chile   Americas   1977    67.1 10599793     4757.\n#>  7 Chile   Americas   1982    70.6 11487112     5096.\n#>  8 Chile   Americas   1987    72.5 12463354     5547.\n#>  9 Chile   Americas   1992    74.1 13572994     7596.\n#> 10 Chile   Americas   1997    75.8 14599929    10118.\n#> # ... with 38 more rows"},{"path":"transformación.html","id":"no-lógico","chapter":"Capítulo 6 Transformación","heading":"6.5.1.8 ! (NO lógico)","text":"Puedes usar un lógico para obtener lo opuesto lo indicado en tu condición. Por ejemplo, observaciones cuyo continente sea Américas o Europa.","code":"\nfilter(gapminder, ! continent %in% c(\"Americas\", \"Europe\"))\n#> # A tibble: 1,044 x 6\n#>    country     continent  year lifeExp      pop gdpPercap\n#>    <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n#>  1 Afghanistan Asia       1952    28.8  8425333      779.\n#>  2 Afghanistan Asia       1957    30.3  9240934      821.\n#>  3 Afghanistan Asia       1962    32.0 10267083      853.\n#>  4 Afghanistan Asia       1967    34.0 11537966      836.\n#>  5 Afghanistan Asia       1972    36.1 13079460      740.\n#>  6 Afghanistan Asia       1977    38.4 14880372      786.\n#>  7 Afghanistan Asia       1982    39.9 12881816      978.\n#>  8 Afghanistan Asia       1987    40.8 13867957      852.\n#>  9 Afghanistan Asia       1992    41.7 16317921      649.\n#> 10 Afghanistan Asia       1997    41.8 22227415      635.\n#> # ... with 1,034 more rows"},{"path":"transformación.html","id":"organizar-filas-según-sus-valores","chapter":"Capítulo 6 Transformación","heading":"6.5.2 Organizar filas según sus valores","text":"Para esto, usar el verbo arrange().Para el siguiente verbo vamos trabajar con un subconjunto de observaciones de gapminder.gapminder_subset está ordenado por el orden alfabético de la columna country.La utilidad de arrange() es que nos permite ordenar nuestros datos en base las variables que escojamos. Debes identificar:El nombre del conjunto de datosLas columnas para el ordenamiento y su tipo de orden.Por defecto, el conjunto de datos se ordenará de manera ascendente. Los caracteres de texto se ordenarán en orden alfabético y los números de menor mayor.","code":"\ngapminder_subset <- filter(gapminder, \n       country %in% c(\"Peru\", \"Chile\", \"Colombia\", \"Mexico\"),\n       year >= 2002)\ngapminder_subset\n#> # A tibble: 8 x 6\n#>   country  continent  year lifeExp       pop gdpPercap\n#>   <fct>    <fct>     <int>   <dbl>     <int>     <dbl>\n#> 1 Chile    Americas   2002    77.9  15497046    10779.\n#> 2 Chile    Americas   2007    78.6  16284741    13172.\n#> 3 Colombia Americas   2002    71.7  41008227     5755.\n#> 4 Colombia Americas   2007    72.9  44227550     7007.\n#> 5 Mexico   Americas   2002    74.9 102479927    10742.\n#> 6 Mexico   Americas   2007    76.2 108700891    11978.\n#> 7 Peru     Americas   2002    69.9  26769436     5909.\n#> 8 Peru     Americas   2007    71.4  28674757     7409."},{"path":"transformación.html","id":"organizar-según-los-valores-de-una-columna","chapter":"Capítulo 6 Transformación","heading":"6.5.2.1 Organizar según los valores de una columna","text":"Podemos indicar que el conjunto de datos se ordene por año.Ahora aparecen primero los datos del 2002 y luego los del 2007. Por defecto, el orden se hace en forma ascendente.Al usar arrange(), si uso la función desc() rodeando la columna elegida, el orden ahora es descendente.","code":"\ngapminder_subset %>% \n    arrange(year)\n#> # A tibble: 8 x 6\n#>   country  continent  year lifeExp       pop gdpPercap\n#>   <fct>    <fct>     <int>   <dbl>     <int>     <dbl>\n#> 1 Chile    Americas   2002    77.9  15497046    10779.\n#> 2 Colombia Americas   2002    71.7  41008227     5755.\n#> 3 Mexico   Americas   2002    74.9 102479927    10742.\n#> 4 Peru     Americas   2002    69.9  26769436     5909.\n#> 5 Chile    Americas   2007    78.6  16284741    13172.\n#> 6 Colombia Americas   2007    72.9  44227550     7007.\n#> 7 Mexico   Americas   2007    76.2 108700891    11978.\n#> 8 Peru     Americas   2007    71.4  28674757     7409.\ngapminder_subset %>% \n    arrange(desc(year))\n#> # A tibble: 8 x 6\n#>   country  continent  year lifeExp       pop gdpPercap\n#>   <fct>    <fct>     <int>   <dbl>     <int>     <dbl>\n#> 1 Chile    Americas   2007    78.6  16284741    13172.\n#> 2 Colombia Americas   2007    72.9  44227550     7007.\n#> 3 Mexico   Americas   2007    76.2 108700891    11978.\n#> 4 Peru     Americas   2007    71.4  28674757     7409.\n#> 5 Chile    Americas   2002    77.9  15497046    10779.\n#> 6 Colombia Americas   2002    71.7  41008227     5755.\n#> 7 Mexico   Americas   2002    74.9 102479927    10742.\n#> 8 Peru     Americas   2002    69.9  26769436     5909."},{"path":"transformación.html","id":"organizar-en-base-a-más-de-una-columna","chapter":"Capítulo 6 Transformación","heading":"6.5.2.2 Organizar en base a más de una columna","text":"Puedo ordenar en base más de una columna, sólo debo agregarla como otro argumento. Por ejemplo, si quiero ver el orden en las expectativas de vida por año.","code":"\ngapminder_subset %>% \n    arrange(year, lifeExp)\n#> # A tibble: 8 x 6\n#>   country  continent  year lifeExp       pop gdpPercap\n#>   <fct>    <fct>     <int>   <dbl>     <int>     <dbl>\n#> 1 Peru     Americas   2002    69.9  26769436     5909.\n#> 2 Colombia Americas   2002    71.7  41008227     5755.\n#> 3 Mexico   Americas   2002    74.9 102479927    10742.\n#> 4 Chile    Americas   2002    77.9  15497046    10779.\n#> 5 Peru     Americas   2007    71.4  28674757     7409.\n#> 6 Colombia Americas   2007    72.9  44227550     7007.\n#> 7 Mexico   Americas   2007    76.2 108700891    11978.\n#> 8 Chile    Americas   2007    78.6  16284741    13172."},{"path":"transformación.html","id":"lecturas-recomendadas","chapter":"Capítulo 6 Transformación","heading":"6.6 Lecturas recomendadas","text":"Esta sesión está basada en el capítulo “Data transformation” del libro R Data Science escrito por Hadley Wickham (autor del paquete dplyr).También te puede ser útil revisar el capítulo “tidyverse” del libro Introduction Data Science escrito por Rafael . Irizarry, o el capítulo “Data Wrangling” del libro Statistical Inference via Data Science escrito por Chester Ismay & Albert Y. Kim (aquí se acuñó el término los cinco gráficos nombrados).","code":""},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"","code":""}]
